Index: pyVectorizer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Bio import SeqIO\r\nfrom collections import defaultdict\r\nfrom itertools import product\r\n\r\nall_kmers_cache = {}\r\n\r\n\r\ndef reverse_compliment(s):\r\n        reverse_letter = {\r\n            'A': 'T',\r\n            'C': 'G',\r\n            'G': 'C',\r\n            'T': 'A'\r\n        }\r\n        return ''.join([reverse_letter[i] for i in s[::-1]])\r\n\r\ndef all_kmers(k):\r\n    if k in all_kmers_cache: return all_kmers_cache[k]\r\n    all_strings = [''.join(i) for i in product(\"ACGT\", repeat=k)]\r\n    proper_strings = [min(i,reverse_compliment(i)) for i in all_strings]\r\n    unique_kmers = list(set(proper_strings))\r\n    unique_kmers.sort()\r\n    all_kmers_cache[k] = unique_kmers\r\n    return unique_kmers\r\n\r\ndef vectorize_seq(seq, k=4):\r\n    d = defaultdict(lambda: 0)\r\n    for c in range(len(seq)-k+1):\r\n        d[seq[c:c+k]]+=1\r\n    return [d[kmer] if kmer==reverse_compliment(kmer) else d[kmer]+d[reverse_compliment(kmer)]for kmer in all_kmers(k)]\r\n\r\ndef vectorize_file(path, k):\r\n    file=SeqIO.parse(path, \"fasta\")\r\n    current_seq=0\r\n    vectors = []\r\n    for i in file:\r\n        vec = vectorize_seq(str(i.seq), k)\r\n        vectors.append(vec)\r\n        if not(current_seq%1000): print(\"Processing sequence \"+str(current_seq))\r\n        current_seq+=1\r\n    return vectors\r\n\r\ndef count_acgt_file(path):\r\n    file=SeqIO.parse(path, \"fasta\")\r\n    current_seq=0\r\n    acgt = [0,0,0,0]\r\n    for i in file:\r\n        seq = str(i.seq)\r\n        acgt[0] += (seq.count(\"A\")+seq.count(\"a\"))\r\n        acgt[1] += (seq.count(\"C\")+seq.count(\"c\"))\r\n        acgt[2] += (seq.count(\"G\")+seq.count(\"g\"))\r\n        acgt[3] += (seq.count(\"T\")+seq.count(\"t\"))\r\n\r\n        if not(current_seq%1000): print(\"Processing sequence \"+str(current_seq))\r\n        current_seq+=1\r\n    return acgt\r\n\r\n#vectors = vectorize_file(\"./data/AAGA01.1.fsa_nt\",4)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pyVectorizer.py	(revision e747a380003ec7445d7328f7014926086a17cd4f)
+++ pyVectorizer.py	(date 1617802964074)
@@ -33,24 +33,29 @@
     file=SeqIO.parse(path, "fasta")
     current_seq=0
     vectors = []
+    j=0
     for i in file:
-        vec = vectorize_seq(str(i.seq), k)
-        vectors.append(vec)
-        if not(current_seq%1000): print("Processing sequence "+str(current_seq))
-        current_seq+=1
+        if (j%100==0):
+            vec = vectorize_seq(str(i.seq), k)
+            vectors.append(vec)
+            if not(current_seq%1000): print("Processing sequence "+str(current_seq))
+            current_seq+=1
+        j+=1
     return vectors
 
 def count_acgt_file(path):
     file=SeqIO.parse(path, "fasta")
     current_seq=0
     acgt = [0,0,0,0]
+    j=0
     for i in file:
-        seq = str(i.seq)
-        acgt[0] += (seq.count("A")+seq.count("a"))
-        acgt[1] += (seq.count("C")+seq.count("c"))
-        acgt[2] += (seq.count("G")+seq.count("g"))
-        acgt[3] += (seq.count("T")+seq.count("t"))
-
+        if (j % 100 == 0):
+            seq = str(i.seq)
+            acgt[0] += (seq.count("A")+seq.count("a"))
+            acgt[1] += (seq.count("C")+seq.count("c"))
+            acgt[2] += (seq.count("G")+seq.count("g"))
+            acgt[3] += (seq.count("T")+seq.count("t"))
+        j+=1
         if not(current_seq%1000): print("Processing sequence "+str(current_seq))
         current_seq+=1
     return acgt
Index: demo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import base64\r\nimport json\r\nimport pathlib\r\nimport os\r\nimport time\r\n\r\nfrom os import listdir\r\nfrom os import path\r\nfrom os.path import isfile, join\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nfrom io import BytesIO\r\nfrom Bio import SeqIO\r\nimport pandas as pd\r\nimport plotly.graph_objs as go\r\n\r\nfrom keras.models import load_model\r\nfrom PIL import Image\r\nfrom dash.dependencies import Input, Output, State\r\nimport pickle\r\nimport plotly.express as px\r\nimport dash_bootstrap_components as dbc\r\nimport dash_table\r\nfrom plotly.colors import n_colors\r\nfrom Bio import SeqIO\r\nimport metagenomics_processor\r\nfrom MetaG_backend import backend\r\nimport metagenomics_counter\r\nimport pyVectorizer\r\n# from helpers import load_mnist, parse_image, numpy_to_b64, create_img, label_mapping\r\nimport run_tsne\r\n\r\n# Setting up upload path\r\nUPLOAD_DIRECTORY = \"fasta_files\"\r\nif not os.path.exists(UPLOAD_DIRECTORY):\r\n    os.makedirs(UPLOAD_DIRECTORY)\r\n\r\n\r\n# get relative data folder\r\nPATH = pathlib.Path(__file__).parent\r\nDATA_PATH = PATH.joinpath(\"data\").resolve()\r\n\r\n\r\n\r\n# Import settings data from csv\r\nSETTINGS_PATH = PATH.joinpath(\"settings\").resolve()\r\nsettings_df = pd.read_csv(SETTINGS_PATH.joinpath(\"sample_settings.csv\"))\r\nsettings_df['Index'] = range(1, len(settings_df) + 1)\r\nsettings_df = settings_df[[\"Index\",\"FASTA File \", \"Iterations\",\"k in kmer\",\"Autoencoder\",\"2D\",\"3D\",\"Activation\"]]\r\n#print(settings_df)\r\n\r\nPAGE_SIZE = 5\r\n\r\nwith open(PATH.joinpath(\"demo_intro.md\"), \"r\") as file:\r\n    demo_intro_md = file.read()\r\n\r\nwith open(PATH.joinpath(\"PCATSNE_intro.md\"), \"r\") as file:\r\n    PCATSNE_intro_md = file.read()\r\n\r\nwith open(PATH.joinpath(\"Taxa_intro.md\"), \"r\") as file:\r\n    Taxa_intro_md = file.read()\r\n\r\n\r\ndef numpy_to_b64(array, scalar=True):\r\n    # Convert from 0-1 to 0-255\r\n    if scalar:\r\n        array = np.uint8(255 * array)\r\n\r\n    im_pil = Image.fromarray(array)\r\n    buff = BytesIO()\r\n    im_pil.save(buff, format=\"png\")\r\n    im_b64 = base64.b64encode(buff.getvalue()).decode(\"utf-8\")\r\n\r\n    return im_b64\r\n\r\n\r\n# Methods for creating components in the layout code\r\ndef Card(children, **kwargs):\r\n    return html.Section(children, className=\"card-style\")\r\n\r\n\r\ndef NamedSlider(name, short, min, max, step, val, marks=None):\r\n    if marks:\r\n        step = None\r\n    else:\r\n        marks = {i: i for i in range(min, max + 1, step)}\r\n\r\n    return html.Div(\r\n        style={\"margin\": \"25px 5px 30px 0px\"},\r\n        children=[\r\n            f\"{name}\",\r\n            html.Div(\r\n                style={\"margin-left\": \"5px\"},\r\n                children=[\r\n                    dcc.Slider(\r\n                        id=f\"slider-{short}\",\r\n                        min=min,\r\n                        max=max,\r\n                        marks=marks,\r\n                        step=step,\r\n                        value=val,\r\n                    )\r\n                ],\r\n            ),\r\n        ],\r\n    )\r\n\r\n\r\ndef NamedInlineRadioItems(name, short, options, val, **kwargs):\r\n    return html.Div(\r\n        id=f\"div-{short}\",\r\n        style={\"display\": \"inline-block\"},\r\n        children=[\r\n            f\"{name}:\",\r\n            dcc.RadioItems(\r\n                id=f\"radio-{short}\",\r\n                options=options,\r\n                value=val,\r\n                labelStyle={\"display\": \"inline-block\", \"margin-right\": \"7px\"},\r\n                style={\"display\": \"inline-block\", \"margin-left\": \"7px\"},\r\n            ),\r\n        ],\r\n    )\r\n\r\n\r\nAE_Dict = {'3': ['[32,x,32]', '[32,4,x,4,32]', '[32,16,x,16,32]'], '4': ['[136,64,x,64,136]', '[136,32,x,32,136]', '[136,16,x,16,136]']}\r\nkmer = list(AE_Dict.keys())\r\nAE_Options = AE_Dict[kmer[0]]\r\nuploaded_fasta_files = [f.split('.')[0] for f in listdir(\"fasta_files\") if isfile(join(\"fasta_files\", f))]\r\n\r\ndef create_layout(app):\r\n    # Actual layout of the app\r\n    return html.Div(\r\n        className=\"row\",\r\n        style={\"max-width\": \"100%\", \"font-size\": \"1.5rem\", \"padding\": \"0px 0px\"},\r\n        children=[\r\n            # Header\r\n            html.Div(\r\n                className=\"row header\",\r\n                id=\"app-header\",\r\n                style={\"background-image\": 'url(\"/assets/white_bg.jpg\")', 'background-size': '1600px 1000px'},\r\n                children=[\r\n                    html.Div(\r\n                        [\r\n                            html.Img(\r\n                                src=app.get_asset_url(\"logo.png\"),\r\n                                className=\"logo\",\r\n                                id=\"plotly-image\",\r\n                            ),\r\n                            html.H3(\r\n                                \"MetaG\",\r\n                                #className=\"header_title\",\r\n                                id=\"meta-app-title\",\r\n                                style={'font-family': 'cursive', 'color':'Black', 'padding-left':\"200px !important\", 'text-shadow': '2px 2px #ff0000'},\r\n                            ),\r\n                            \r\n                        ],\r\n                        className=\"three columns header_img\",\r\n                    ),\r\n                    html.Div(\r\n                        [\r\n                            html.H5(\r\n                                \"Comprehensive Metagenomics Analysis Tool\",\r\n                                className=\"header_title\",\r\n                                id=\"app-title\",\r\n                                style={'font-family': 'arial', 'color':'Black'},\r\n                            )\r\n                        ],\r\n                        className=\"nine columns header_title_container\",\r\n                    ),\r\n                ],\r\n            ),\r\n            html.Div(\r\n                className=\"row background\",\r\n                children=[\r\n                dcc.Loading(\r\n            id=\"loading-1\",\r\n            type=\"default\",\r\n            children=html.Div(id=\"loading-output-1\")\r\n        ),\r\n                html.Div(\r\n                    className=\"twelve columns\",\r\n                    id=\"tab-div\",\r\n                    \r\n                        children=[\r\n                            Card(dcc.Tabs(id=\"main-tabs\", value='tab1', children=[dcc.Tab(label='Basic Autoencoder Analysis', value='tab1',\r\n                                children=[\r\n                                    # Demo Description\r\n            html.Div(\r\n                className=\"row background\",\r\n                id=\"pcatsne-explanation\",\r\n                style={\"padding\": \"50px 45px\"},\r\n                children=[\r\n                    \r\n                    html.Div(\r\n                        id=\"description-text\", children=dcc.Markdown(demo_intro_md)\r\n                    ),\r\n                ],\r\n            ),\r\n            # Body\r\n            html.Div(\r\n                className=\"row background\",\r\n                style={\"padding\": \"10px\"},\r\n                children=[\r\n                    html.Div(\r\n                        style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"background-color\":\"#E6E5E6\"},\r\n                        className=\"three columns\",\r\n                        children=[\r\n                            Card(dcc.Tabs(id=\"tabs\", value='tab1', children=[dcc.Tab(label='Settings', value='tab1', id =\"basic-analysis\",\r\n                                children=\r\n\r\n                                [\r\n                                    html.Hr(),\r\n                                    html.P(\"Metagenomic sample\"),\r\n                                    dcc.Dropdown(\r\n                                        id=\"fasta-dropdown\",\r\n                                        style={\"margin-top\": \"50px\"},\r\n                                        searchable=False,\r\n                                        clearable=False,\r\n                                        options=[],\r\n                                        placeholder=\"Select a dataset\",\r\n                                        value=\"Synthetic1\",\r\n                                    ),\r\n                                    html.Br(),\r\n                                    html.Hr(),\r\n                                    html.P(\"Choose Training Sample Percentage\"),\r\n                                    dcc.Input(id=\"training_downsample\", type=\"number\", value=60, min=10, max=100, step=5),\r\n                                    html.Br(),\r\n                                    html.Hr(),\r\n                                    \r\n                                     html.Div([\r\n                                        html.P(\"Choose Iterations\"),\r\n                                        dcc.Slider(\r\n                                            id = \"iterations-slider\",\r\n                                            min=200,\r\n                                            max=7000,\r\n                                            step=50,\r\n                                            value=2950,\r\n                                        ),\r\n                                        html.Div(id='slider-output-container')\r\n                                    ]),\r\n                                     html.Hr(),\r\n                                     html.P(\"Choose k in k-mers\"),\r\n                                    dcc.Dropdown(\r\n                                        id = \"kmer\",\r\n                                        options=[{'label':k, 'value':k} for k in kmer],\r\n                                        value='4'\r\n                                    )  ,\r\n                                    html.Hr(),\r\n                                    html.P(\"Choose Autoencoder\"),\r\n                                    dcc.Dropdown(\r\n                                        id='ae-dropdown',\r\n                                        value= \"[136,64,x,64,136]\"\r\n                                    ),\r\n                                     html.Hr(),\r\n                                    html.P(\"Choose Dimensions\"),\r\n                                    dcc.RadioItems(\r\n                                        id = \"dimension\",\r\n                                        inputStyle ={'margin-right':'30px'},\r\n                                        options=[\r\n                                            {'label': '2D    ', 'value': '2d'},\r\n                                            {'label': '3D    ', 'value': '3d'},\r\n                                           \r\n                                        ],\r\n                                        value='2d'\r\n                                    )  ,\r\n                                     html.Hr(),\r\n                                    html.P(\"Activation Function\"),\r\n                                    dcc.RadioItems(\r\n                                        id = \"activation\",\r\n                                        inputStyle ={'margin-right':'30px'},\r\n                                        options=[\r\n                                            {'label': 'Sigmoid', 'value': 'sigmoid'},\r\n                                            {'label': 'Tanh', 'value': 'tanh'},\r\n                                        ],\r\n                                        value='sigmoid'\r\n                                    )  ,\r\n                                    html.Hr(),\r\n                                    dbc.Button(\"Submit\", id=\"submit-btn\", color=\"primary\", className=\"mr-1\", style={\"color\":\"White\", \"background-color\":\"#32CD32\", \"margin\": \"0 auto\", \"display\": \"block\"}),\r\n                                    #dbc.Alert(id='submit-alert'),\r\n                                    html.Hr(),\r\n                                   html.Div( id='submit-alert'),\r\n                                    \r\n                                ]),\r\n                                dcc.Tab(label='Data', value='tab2', children=[\r\n                        \r\n                        html.Br(),\r\n                        html.P(\r\n                            \"FASTA file containing the sequence reads of the metagenomic sample is required to do the analysis and prompt the visualizations.\"\r\n                        ),\r\n                         html.Br(),\r\n                        html.Img(src='assets/reads.PNG', style={\"width\":\"100%\", \"height\":\"50%\", \"padding-bottom\":\"20px\"}),\r\n                        html.Br(),\r\n                        html.P(\"Please upload your FASTA file containing metagenomic shotgun sequence reads in order to get the visualizations.\"),\r\n                        html.Br(),\r\n                        html.P(\"After uploading, please go to the settings tab and select the uploaded FASTA file from the dropdown menu and add the settings.\"),\r\n                        \r\n                        \r\n                        html.Span(\r\n                            className=\"control-label\", children=[html.H5(\"Upload the sequence file\")]\r\n                        ),\r\n                        dcc.Upload(\r\n                            id=\"upload-data\",\r\n                            className=\"upload-component\",\r\n                            children=html.Div(\r\n                                [\"Drag and Drop or \", html.A(\"Select Files\")]\r\n                            ),\r\n                            style={\"padding-bottom\":\"400px\"},\r\n                        ),\r\n                        html.Div(id='upload-output'),\r\n                        ]),\r\n                                ])\r\n                            )\r\n                        ],\r\n                    ),\r\n                     html.Div(\r\n                        className=\"nine columns\",\r\n                        \r\n                        children=[\r\n                            html.Div(\r\n                            style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 70px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                            children=[\r\n                            html.H3(\r\n                                        className=\"graph-title\",\r\n                                        children=\"Current Results\",\r\n                                    ),\r\n                            dash_table.DataTable(\r\n                                id='table-paging-and-sorting',\r\n                                columns=[\r\n                                    {'name': i, 'id': i, 'deletable': True} for i in settings_df.columns\r\n                                ],\r\n                                page_current=0,\r\n                                page_size=PAGE_SIZE,\r\n                                page_action='custom',\r\n                                row_selectable=\"single\",\r\n                                selected_rows=[0],\r\n                                sort_action='custom',\r\n                                sort_mode='single',\r\n                                sort_by=[],\r\n                                style_as_list_view=True,\r\n                                style_header={'backgroundColor': 'rgb(30, 30, 30)', 'fontWeight': 'bold'},\r\n                                \r\n                                style_cell={\r\n                                    'backgroundColor': 'rgb(50, 50, 50)',\r\n                                    'color': 'white'\r\n                                },\r\n                            ),\r\n                            ],\r\n                            ),\r\n                        ],\r\n                    ),\r\n                     html.Br(),\r\n                    \r\n                    html.Br(),\r\n                     html.Div(\r\n                         className=\"nine columns\",\r\n                         style = {\"padding-top\":\"20px\"},\r\n                         children=[\r\n                    html.Div(\r\n                        \r\n                        style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                        children=[\r\n                            html.H3(    id = \"dr-graph-title\",\r\n                                        className=\"graph-title\",\r\n                                        children=\"Sequence data reduced Representation \",\r\n                                    ),\r\n                            dcc.Graph(id=\"graph-3d-plot-tsne\", style={\"height\": \"98vh\", \"margin-bottom\":\"50px\"})\r\n                        ],\r\n                    ),\r\n                ],\r\n            ),\r\n\r\n                    html.Div(\r\n                         className=\"nine columns\",\r\n                         style = {\"padding-top\":\"20px\"},\r\n                         children=[\r\n                    html.Div(\r\n                        style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                        children=[\r\n                            html.H3(\r\n                                        className=\"graph-title\",\r\n                                        children=\"Metagenomic Nucleotide Frequencies\",\r\n                                        \r\n                                    ),\r\n                            dcc.Graph(id='example-graph-2', style={\"height\": \"98vh\",\"margin-bottom\":\"50px\"})\r\n                        ],\r\n                    ),\r\n                ],\r\n            ),\r\n                    html.Div(\r\n                         className=\"nine columns\",\r\n                         style = {\"padding-top\":\"20px\"},\r\n                         children=[\r\n                     html.Div(\r\n                        \r\n                        style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\", \"margin-left\":\"320px\",\"margin-right\":\"-320px\"},\r\n                        children=[\r\n                            html.H3(\r\n                                        className=\"graph-title\",\r\n                                        children=\"Sequence Content\",\r\n                                        \r\n                                    ),\r\n                            dcc.Graph(id='ACGT_donut_chart', style={\"height\": \"98vh\", \"margin-bottom\":\"50px\"})\r\n                        ],\r\n                    ),\r\n                ],\r\n            ),\r\n                    html.Div(\r\n                        className=\"twelve columns\",\r\n                        id=\"footer\",\r\n                        children=[\r\n                            html.Div(style={\"height\":\"100px\"}),\r\n                        ],\r\n                    ),\r\n                    html.Div(\r\n                        className=\"three columns\",\r\n                        id=\"euclidean-distance\",\r\n                        children=[\r\n                            Card(\r\n                                style={\"padding\": \"5px\"},\r\n                                children=[\r\n                                    \r\n                                    html.Div(id=\"div-plot-click-image\"),\r\n                                    html.Div(id=\"div-plot-click-wordemb\"),\r\n                                ],\r\n                            )\r\n                        ],\r\n                    ),\r\n                    \r\n                ],\r\n            ),\r\n\r\n                                ],\r\n                            ),\r\n                            dcc.Tab(label='Taxanomic Analysis', value='tab2', children=[\r\n                                html.Div(\r\n                                style={\"padding\": \"10px\"},\r\n                                children=[\r\n                                html.Div(\r\n                                    className=\"row background\",\r\n                                    id=\"taxa-explanation\",\r\n                                    style={\"padding\": \"50px 45px\"},\r\n                                    children=[\r\n                                        \r\n                                        html.Div(\r\n                                            id=\"taxa\", children=dcc.Markdown(Taxa_intro_md)\r\n                                        ),\r\n                                    ],\r\n                                ),\r\n                                html.Div(\r\n                         className=\"twelve columns\",\r\n                         style = {\"padding-top\":\"20px\"},\r\n                         children=[\r\n                            \r\n                            html.Br(),\r\n                                    html.Div(\r\n                                        \r\n                                        children=[\r\n                                    html.Div(\r\n                                        \r\n                                        style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                        children=[\r\n                                            html.H3(    id = \"hybrid-graph-title\",\r\n                                                        className=\"graph-title\",\r\n                                                        children=\"Reduced Representation with Taxonomy Details \",\r\n                                                    ),\r\n                                            dcc.Graph(id=\"hybrid-plot\", style={\"height\": \"98vh\", \"margin-bottom\":\"50px\"})\r\n                                        ],\r\n                                    ),\r\n                                ],\r\n                            ),\r\n                            \r\n                            html.Div(\r\n                                style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                children=[\r\n                                dcc.Graph(id='domain_donut_chart', style={\"height\": \"49vh\",\"width\": \"49%\",  \"display\":\"inline-block\", \"padding-right\":\"2%\"}),\r\n                                dcc.Graph(id='phylum_donut_chart', style={\"height\": \"49vh\",\"width\": \"49%\", \"display\":\"inline-block\"})\r\n                            ]),\r\n                            html.Div(\r\n                                style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                children=[\r\n                                dcc.Graph(id='class_donut_chart', style={\"height\": \"49vh\",\"width\": \"49%\",  \"display\":\"inline-block\", \"padding-right\":\"2%\"}),\r\n                                dcc.Graph(id='order_donut_chart', style={\"height\": \"49vh\", \"width\": \"49%\",\"display\":\"inline-block\"})\r\n                            ]),\r\n                            html.Div(\r\n                                style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                children=[\r\n                                dcc.Graph(id='family_donut_chart', style={\"height\": \"49vh\",\"width\": \"49%\",  \"display\":\"inline-block\", \"padding-right\":\"2%\"}),\r\n                                dcc.Graph(id='genus_donut_chart', style={\"height\": \"49vh\",\"width\": \"49%\", \"display\":\"inline-block\"})\r\n                            ]),\r\n                            html.Div(\r\n                                style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                children=[\r\n                                dcc.Graph(id='species_donut_chart', style={\"height\": \"75vh\",  \"align\":\"center\"}),\r\n                \r\n                            ]),\r\n                            \r\n                            \r\n                ],\r\n            ),\r\n                                    html.Div(\r\n                                                className=\"twelve columns\",\r\n                                                style = {\"padding-top\":\"20px\"},\r\n                                                children=[\r\n                                                    html.Div(\r\n                                                        \r\n                                                        style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                                        children=[\r\n                                                            html.H3(\r\n                                                                        className=\"graph-title\",\r\n                                                                        children=\"GC content Distribution\",\r\n                                                                        \r\n                                                                    ),\r\n                                                            dcc.Graph(id='violin_plot', style={\"height\": \"98vh\", \"margin-bottom\":\"50px\"})\r\n                                                        ],\r\n                                                    ),\r\n                                        ],\r\n                                    ),\r\n                                ]\r\n                                ),\r\n                            ],\r\n                            ),\r\n                            dcc.Tab(label='t-SNE / PCA Analysis', value='tab3', children=[\r\n                                html.Div(\r\n                                style={\"padding\": \"10px\"},\r\n                                children=[\r\n                               \r\n                                html.Div(\r\n                                    className=\"row background\",\r\n                                    id=\"demo-explanation\",\r\n                                    style={\"padding\": \"50px 45px\"},\r\n                                    children=[\r\n                                        \r\n                                        html.Div(\r\n                                            id=\"pcatsne-intro\", children=dcc.Markdown(PCATSNE_intro_md)\r\n                                        ),\r\n                                    ],\r\n                                ),\r\n                                # Body\r\n                                html.Div(\r\n                                    className=\"row background\",\r\n                                    style={\"padding\": \"10px\"},\r\n                                    children=[\r\n                                        html.Div(\r\n                                            style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"background-color\":\"#E6E5E6\"},\r\n                                            className=\"three columns\",\r\n                                            children=[\r\n                                                Card(id=\"pcatsne-tabs\", \r\n                                                    children=\r\n\r\n                                                    [   html.H5(\"t-SNE Settings\"),\r\n                                                      \r\n                                                        html.Hr(),\r\n                                                        html.P(\"Metagenomic sample\"),\r\n                                                        dcc.Dropdown(\r\n                                                            id=\"pcatsne-fasta-dropdown\",\r\n                                                            searchable=False,\r\n                                                            clearable=False,\r\n                                                            options=[],\r\n                                                            placeholder=\"Select a dataset\",\r\n                                                            value=\"Synthetic1\",\r\n                                                        ),\r\n                                                        html.Hr(),\r\n                                                        html.P(\"Kmer\"),\r\n                                                        dcc.Dropdown(\r\n                                                            id = \"pcatsne-kmer\",\r\n                                                            options=[{'label':k, 'value':k} for k in kmer],\r\n                                                            value='4'\r\n                                                        )  ,\r\n                                                        html.Hr(),\r\n                                                        html.P(\"Plot Dimension\"),\r\n                                                        dcc.Dropdown(\r\n                                                            id = \"pcatsne-dim\",\r\n                                                            options=[{'label': '2D    ', 'value': '2d'},{'label': '3D    ', 'value': '3d'}],\r\n                                                            value='2d'\r\n                                                        )  ,\r\n                                                        html.Hr(),\r\n                                                        NamedSlider(\r\n                                                            name=\"Number Of Iterations\",\r\n                                                            short=\"iterations\",\r\n                                                            \r\n                                                            min=250,\r\n                                                            max=1000,\r\n                                                            step=None,\r\n                                                            val=500,\r\n                                                            marks={\r\n                                                                i: str(i) for i in [250, 500, 750, 1000]\r\n                                                            },\r\n                                                        ),\r\n                                                        NamedSlider(\r\n                                                            name=\"Perplexity\",\r\n                                                            short=\"perplexity\",\r\n                                                            \r\n                                                            min=3,\r\n                                                            max=100,\r\n                                                            step=None,\r\n                                                            val=30,\r\n                                                            marks={i: str(i) for i in [3, 10, 30, 50, 100]},\r\n                                                        ),\r\n                                                        NamedSlider(\r\n                                                            name=\"Initial PCA Dimensions\",\r\n                                                            short=\"pca-dimension\",\r\n                                                            \r\n                                                            min=20,\r\n                                                            max=100,\r\n                                                            step=10,\r\n                                                            val=50,\r\n                                                            marks={i: str(i) for i in [20,30,40,50,60,70,80,90,100]},\r\n                                                        ),\r\n                                                        NamedSlider(\r\n                                                            name=\"Learning Rate\",\r\n                                                            short=\"learning-rate\",\r\n                                                           \r\n                                                            min=20,\r\n                                                            max=200,\r\n                                                            step=None,\r\n                                                            val=100,\r\n                                                            marks={i: str(i) for i in [20,40,60,80,100,120, 140,160, 180, 200]},\r\n                                                        ),\r\n                                    \r\n                                                        \r\n                                                        dbc.Button(\"Submit\", id=\"pcatsne-submit-btn\", color=\"primary\", className=\"mr-1\", style={\"color\":\"White\", \"background-color\":\"#32CD32\", \"margin\": \"0 auto\", \"display\": \"block\"}),\r\n                                                        #dbc.Alert(id='submit-alert'),\r\n                                                        html.Hr(),\r\n                                                        html.Div( id='pcatsne-submit-alert'),\r\n                                                        \r\n                                                    ],\r\n                                                    \r\n                                                    )\r\n                                                \r\n                                            ],\r\n                                        ),\r\n                                        \r\n                                        html.Div(\r\n                                            className=\"nine columns\",\r\n                                            children=[\r\n                                        html.Div(\r\n                                            \r\n                                            style={\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\", \"padding\":\"10px 10px 10px 10px\", \"background-color\":\"#E6E5E6\"},\r\n                                            children=[\r\n                                                html.H3(    id = \"tsne-graph-title\",\r\n                                                            className=\"graph-title\",\r\n                                                            children=\"t-SNE Representation \",\r\n                                                        ),\r\n                                                dcc.Graph(id=\"tsne-plot\", style={\"height\": \"98vh\", \"margin-bottom\":\"50px\"})\r\n                                            ],\r\n                                        ),\r\n                                    ],\r\n                                ),\r\n                                \r\n                                       \r\n                                        \r\n                                        \r\n                                        \r\n                                    ],\r\n                                ),\r\n                                ])])\r\n                            ]\r\n                            )\r\n                            )\r\n                        ]\r\n                \r\n                )\r\n                ]\r\n\r\n            ),\r\n            \r\n            \r\n        ],\r\n    )\r\n\r\n\r\ndef demo_callbacks(app):\r\n    @app.callback(\r\n    dash.dependencies.Output('slider-output-container', 'children'),\r\n    [dash.dependencies.Input('iterations-slider', 'value')])\r\n    def update_output(value):\r\n        return 'You have selected {} iterations'.format(value)\r\n\r\n\r\n    def preprocessing():\r\n        print(\"preprocessing started ...\")\r\n\r\n\r\n\r\n    @app.callback(\r\n    dash.dependencies.Output('ae-dropdown', 'options'),\r\n    [dash.dependencies.Input('kmer', 'value')])\r\n    def update_ae_dropdown(k):\r\n        return [{'label': i, 'value': i} for i in AE_Dict[k]]\r\n\r\n    @app.callback(\r\n    dash.dependencies.Output('fasta-dropdown', 'options'),\r\n    [Input(\"upload-data\", \"filename\"),Input(\"upload-data\", \"contents\")])\r\n    def update_fasta_dropdown(uploaded_filenames,uploaded_file_contents):\r\n        uploaded_fasta_files = [f.split('.')[0] for f in listdir(\"fasta_files\") if isfile(join(\"fasta_files\", f))]\r\n        if uploaded_filenames is not None:\r\n            file_name = '_'.join(uploaded_filenames.split(\".\")[:-1])\r\n            mod_uploaded_filenames = file_name.replace(\" \",\"_\") + \".fasta\"\r\n            uploaded_fasta_files.append(mod_uploaded_filenames.split('.')[0])\r\n        \r\n        return [{'label': i, 'value': i} for i in uploaded_fasta_files]\r\n\r\n    @app.callback(\r\n    dash.dependencies.Output('pcatsne-fasta-dropdown', 'options'),\r\n    [Input(\"upload-data\", \"filename\"),Input(\"upload-data\", \"contents\")])\r\n    def update_fasta_dropdown(uploaded_filenames,uploaded_file_contents):\r\n        uploaded_fasta_files = [f.split('.')[0] for f in listdir(\"fasta_files\") if isfile(join(\"fasta_files\", f))]\r\n        if uploaded_filenames is not None:\r\n            file_name = '_'.join(uploaded_filenames.split(\".\")[:-1])\r\n            mod_uploaded_filenames = file_name.replace(\" \",\"_\") + \".fasta\"\r\n            uploaded_fasta_files.append(mod_uploaded_filenames.split('.')[0])\r\n        \r\n        return [{'label': i, 'value': i} for i in uploaded_fasta_files]\r\n\r\n    def save_file(name, content):\r\n        \"\"\"Decode and store a file uploaded with Plotly Dash.\"\"\"\r\n        #print(content)\r\n        #print(name)\r\n        with open(os.path.join(UPLOAD_DIRECTORY, name), \"w\") as fp:\r\n            fp.write(content)\r\n    \r\n    \r\n    @app.callback(\r\n    Output(\"upload-output\", \"children\"),\r\n    [Input(\"upload-data\", \"filename\"), Input(\"upload-data\", \"contents\")])\r\n    def update_output(uploaded_filenames, uploaded_file_contents):\r\n        \"\"\"Save uploaded files and regenerate the file list.\"\"\"\r\n        \r\n        if uploaded_filenames is not None and uploaded_file_contents is not None:\r\n            decoded_content = base64.b64decode(uploaded_file_contents.split(',')[-1]).decode('utf-8')\r\n            file_extention = uploaded_filenames.split(\".\")[-1]\r\n            file_name = '_'.join(uploaded_filenames.split(\".\")[:-1])\r\n            uploaded_filenames = file_name.replace(\" \",\"_\") + \".fasta\"\r\n            save_file(uploaded_filenames, decoded_content)\r\n        return html.Div()\r\n\r\n    @app.callback(Output(\"loading-output-1\", \"children\"), [Input(\"tab-div\", \"children\")])\r\n    def input_triggers_spinner(children):\r\n        time.sleep(2)\r\n        return None\r\n\r\n        \r\n\r\n\r\n    @app.callback(\r\n    Output('table-paging-and-sorting', 'data'),\r\n    [\r\n     Input('table-paging-and-sorting', \"page_size\"),\r\n     Input('table-paging-and-sorting', 'sort_by'),\r\n     Input('table-paging-and-sorting', 'selected_rows'),\r\n     Input('table-paging-and-sorting', \"page_current\"),]\r\n     )\r\n    def update_table(page_size, sort_by, selected_rows,page_current ):\r\n        if len(sort_by):\r\n            # Import settings data from csv\r\n            SETTINGS_PATH = PATH.joinpath(\"settings\").resolve()\r\n            settings_df = pd.read_csv(SETTINGS_PATH.joinpath(\"sample_settings.csv\"))\r\n            settings_df['Index'] = range(1, len(settings_df) + 1)\r\n            settings_df = settings_df[[\"Index\",\"FASTA File \", \"Iterations\",\"k in kmer\",\"Autoencoder\",\"2D\",\"3D\",\"Activation\"]]\r\n            dff = settings_df.sort_values(\r\n                sort_by[0]['column_id'],\r\n                ascending=sort_by[0]['direction'] == 'asc',\r\n                inplace=False\r\n            )\r\n        else:\r\n\r\n            SETTINGS_PATH = PATH.joinpath(\"settings\").resolve()\r\n            settings_df = pd.read_csv(SETTINGS_PATH.joinpath(\"sample_settings.csv\"))\r\n            settings_df['Index'] = range(1, len(settings_df) + 1)\r\n            settings_df = settings_df[[\"Index\",\"FASTA File \", \"Iterations\",\"k in kmer\",\"Autoencoder\",\"2D\",\"3D\",\"Activation\"]]\r\n            dff = settings_df\r\n\r\n        return dff.iloc[\r\n            page_current*page_size:(page_current+ 1)*page_size\r\n        ].to_dict('records')\r\n\r\n\r\n    def generate_figure_image(embedding_df):\r\n\r\n        df = pd.DataFrame(dict(x=embedding_df[\"a0\"].tolist(),\r\n                               y=embedding_df[\"a1\"].tolist(),\r\n                               z=embedding_df[\"a2\"].tolist()))\r\n\r\n        figure = px.scatter_3d(df, x=\"x\", y=\"y\", z=\"z\")\r\n        figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))\r\n\r\n        return figure\r\n\r\n\r\n    def generate_figure_2d_image(embedding_df):\r\n\r\n        df = pd.DataFrame(dict(x=embedding_df[\"a0\"].tolist(),\r\n                               y=embedding_df[\"a1\"].tolist(),))\r\n\r\n        figure = px.scatter(df, x=\"x\", y=\"y\",render_mode='webgl')\r\n        figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))\r\n\r\n        return figure\r\n\r\n    def generate_hybrid_fig(embedding_df):\r\n\r\n        df = pd.DataFrame(dict(x=embedding_df[\"a0\"].tolist(),\r\n                               y=embedding_df[\"a1\"].tolist(),\r\n                               z=embedding_df[\"a2\"].tolist(),\r\n                               color = embedding_df[\"lin_0\"].tolist()))\r\n\r\n        figure = px.scatter_3d(df, x=\"x\", y=\"y\", z=\"z\", color = \"color\")\r\n        figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))\r\n\r\n        return figure\r\n    \r\n    def generate_hybrid_2d_fig(embedding_df):\r\n\r\n        df = pd.DataFrame(dict(x=embedding_df[\"a0\"].tolist(),\r\n                               y=embedding_df[\"a1\"].tolist(),\r\n                               color = embedding_df[\"lin_0\"].tolist()))\r\n\r\n        figure = px.scatter(df, x=\"x\", y=\"y\",color = \"color\", render_mode='webgl')\r\n        figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))\r\n\r\n        return figure\r\n    \r\n     \r\n\r\n    @app.callback(\r\n        [Output(\"graph-3d-plot-tsne\", \"figure\"),\r\n         Output(\"ACGT_donut_chart\", \"figure\"),\r\n         Output(\"example-graph-2\", \"figure\"),\r\n         Output(\"dr-graph-title\", \"children\"),\r\n         Output(\"hybrid-plot\", \"figure\"),\r\n         Output(\"domain_donut_chart\", \"figure\"),\r\n         Output(\"phylum_donut_chart\", \"figure\"),\r\n         Output(\"class_donut_chart\", \"figure\"),\r\n         Output(\"order_donut_chart\", \"figure\"),\r\n         Output(\"family_donut_chart\", \"figure\"),\r\n         Output(\"genus_donut_chart\", \"figure\"),\r\n         Output(\"species_donut_chart\", \"figure\"),\r\n         Output(\"violin_plot\", \"figure\"),\r\n         Output(\"submit-alert\", \"children\")],\r\n        [Input(\"submit-btn\", \"n_clicks\"),\r\n         Input('table-paging-and-sorting', 'sort_by'),\r\n         Input('table-paging-and-sorting', 'selected_rows'),\r\n         Input('table-paging-and-sorting', \"page_size\"),\r\n         Input('table-paging-and-sorting', \"page_current\")],\r\n        [\r\n            \r\n            State(\"fasta-dropdown\", \"value\"),\r\n            State(\"iterations-slider\", \"value\"),\r\n            State(\"kmer\", \"value\"),\r\n            State(\"ae-dropdown\", \"value\"),\r\n            State(\"dimension\", \"value\"),\r\n            State(\"activation\", \"value\"),\r\n            State(\"training_downsample\", \"value\"),\r\n            \r\n        ],\r\n    )\r\n    def display_2d_scatter_plot(\r\n        btn1,\r\n        sort_by,\r\n        selected_rows,\r\n        page_size,\r\n        current_page,\r\n        fasta_name,\r\n        iterations,\r\n        kmer,\r\n        ae,\r\n        dim,\r\n        act,\r\n        training_percentage,\r\n        \r\n    ):\r\n            \r\n            print(current_page)\r\n            if selected_rows and not btn1:\r\n                return load_from_table(sort_by, selected_rows, current_page, page_size)\r\n            input_url = [\r\n                \"fasta_files\",\r\n                str(fasta_name) + \".fasta\",\r\n            ]\r\n            input_file_path = PATH.joinpath(*input_url)\r\n\r\n            data_url = [\r\n                \"results\",\r\n                str(fasta_name),\r\n                str(dim)+\"_$$_\"+str(kmer)+\"_$$_\"+str(iterations)+\"_$$_\"+str(ae)+\"_$$_\"+str(act)+\".csv\",\r\n            ]\r\n            \r\n            results_path = PATH.joinpath(*data_url)\r\n            folder_created_now = False\r\n            if not os.path.exists(\"results/\"+str(fasta_name)):\r\n                folder_created_now = True\r\n                os.makedirs(\"results/\"+str(fasta_name))\r\n\r\n            freq_counter_url = [\r\n                \"results\",\r\n                str(fasta_name),\r\n            ]\r\n            freq_counter_path = PATH.joinpath(*freq_counter_url)\r\n            donut_fig = calc_acgt_count(input_file_path, int(kmer), freq_counter_path)\r\n            freq_fig = freq_count(input_file_path, int(kmer), freq_counter_path)\r\n\r\n            try:\r\n                print(\"available\")\r\n                embedding_df = pd.read_csv(\r\n                    results_path, index_col=0, encoding=\"ISO-8859-1\"\r\n                )\r\n\r\n            except FileNotFoundError as error:\r\n                print(\r\n                    error,\r\n                    \"\\nThe dataset was not found. Please generate it using generate_demo_embeddings.py\",\r\n                )\r\n\r\n                act = str(act)\r\n                ui_ae = ae\r\n                ae = ae[1:-1].split(\",\")\r\n                \r\n                ind = ae.index('x')\r\n                ae[ind] = int(dim[0])\r\n                for i in range(len(ae)):\r\n                    ae[i] = int(ae[i])\r\n                \r\n                # l = metagenomics_processor.process(input_file_path, int(kmer), int(iterations), act, ae, results_path)\r\n                \r\n\r\n                \r\n\r\n                training_percentage = training_percentage/100\r\n                if folder_created_now:\r\n                    l = backend.process(input_file_path, int(kmer), int(iterations), act, ae,training_percentage)\r\n                else:\r\n                    import re\r\n                    for f in os.listdir('./results/'+str(fasta_name)):\r\n                        print(\"inside 1\")\r\n                        if re.match('3d', f):\r\n                            print(\"inside 3d\")\r\n                            embedding_df = pd.read_csv(\r\n                                \"./results/\"+str(fasta_name)+\"/\"+str(f), index_col=0, encoding=\"ISO-8859-1\"\r\n                            )\r\n                            l = backend.process_ae(input_file_path, int(kmer), int(iterations), act, ae,\r\n                                                        training_percentage, embedding_df)\r\n                            break\r\n                        elif re.match('2d', f):\r\n                            print(\"inside 2d\")\r\n                            embedding_df = pd.read_csv(\r\n                                \"./results/\"+str(fasta_name)+\"/\"+str(f), index_col=0, encoding=\"ISO-8859-1\"\r\n                            )\r\n                            l = backend.process_ae(input_file_path, int(kmer), int(iterations), act, ae,\r\n                                                        training_percentage, embedding_df)\r\n                            break\r\n\r\n                        else:\r\n                            l = backend.process(input_file_path, int(kmer), int(iterations), act, ae,\r\n                                                           training_percentage)\r\n\r\n                print(\"out of process\")\r\n\r\n                l.to_csv(results_path)\r\n                embedding_df = pd.read_csv(\r\n                    results_path, index_col=0, encoding=\"ISO-8859-1\"\r\n                )\r\n                print(\"read csv\")\r\n                settings_path = 'settings/sample_settings.csv'\r\n               \r\n               \r\n                settings = {'FASTA File ': [str(fasta_name) + \".fasta\"],\r\n                            'Iterations': [iterations],\r\n                            'k in kmer': [kmer],\r\n                            'Autoencoder': [str(ui_ae).replace(\" \", \"\")],\r\n                            '2D': 'Yes' if dim == \"2d\" else \"\",\r\n                            '3D': 'Yes' if dim == \"3d\" else \"\",\r\n                            'Activation': [act]\r\n                            }\r\n                print(settings)\r\n                print(pd.DataFrame(settings))\r\n                pd.DataFrame(settings).to_csv(settings_path, mode='a', header=not (path.exists(settings_path)), index=False)\r\n\r\n\r\n            \r\n            sampled_embedding_df = embedding_df[embedding_df['sampled']]\r\n \r\n            sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')]=sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')].apply(lambda x : x.fillna(value=\"NA\"))\r\n            \r\n            dim = int(dim[0])\r\n            if dim==2:\r\n                figure = generate_figure_2d_image(sampled_embedding_df)\r\n                graph_title = \"Sequence data reduced to 2D Representation \"\r\n                hybrid_plot = generate_hybrid_2d_fig(sampled_embedding_df)\r\n            else:\r\n                figure = generate_figure_image(sampled_embedding_df)\r\n                graph_title = \"Sequence data reduced to 3D Representation \"\r\n                hybrid_plot = generate_hybrid_fig(sampled_embedding_df)\r\n            msg = \"Sucsessful !\"\r\n            st = {'width':'100%','color'\r\n            :'Green','background-color':'#D3FFC5 ',' border-style':'solid','border-radius': '2px', 'padding':'3px 3px 2px 2px', 'text-align': 'center',\"border\": \"1px solid\", \"box-shadow\": \"5px 5px 5px #888888\", \"border-radius\":\"5px\",}\r\n            domain_donut_figure = generate_domain_donut(embedding_df)\r\n            phylum_donut_figure = generate_phylum_donut(embedding_df)\r\n            class_donut_figure = generate_class_donut(embedding_df)\r\n            order_donut_figure = generate_order_donut(embedding_df)\r\n            family_donut_figure = generate_family_donut(embedding_df)\r\n            genus_donut_figure = generate_genus_donut(embedding_df)\r\n            species_donut_figure = generate_species_donut(embedding_df)\r\n            violin_plot = generate_violin_plot(embedding_df)\r\n            return figure, donut_fig, freq_fig, graph_title, hybrid_plot,domain_donut_figure,phylum_donut_figure,class_donut_figure,order_donut_figure,family_donut_figure,genus_donut_figure,species_donut_figure, violin_plot,html.Div(msg, style = st)\r\n\r\n    def calc_acgt_count(input_path, k, output_path):\r\n        try:\r\n            with open(output_path/'_acgt.json') as json_file:\r\n                data = json.load(json_file)\r\n\r\n        except FileNotFoundError:\r\n            metagenomics_counter.count_process(input_path, k, output_path)\r\n            with open(output_path/'_acgt.json') as json_file:\r\n                data = json.load(json_file)\r\n\r\n        donut_labels = ['A', 'C', 'G', 'T']\r\n        donut_values = data\r\n        donut_fig = go.Figure(data=[go.Pie(labels=donut_labels, values=donut_values, hole=.3)])\r\n        GC_value = (donut_values[1]+donut_values[2])/sum(donut_values)\r\n        GC_value = round(GC_value*100, 3)\r\n        GC_content = \"GC-content = \" + str(GC_value) + \"%\"\r\n        donut_fig.update_layout(title=GC_content)\r\n        return donut_fig\r\n\r\n\r\n    def freq_count(input_path, k, output_path):\r\n        file_name = str(k)+\"_freqs.json\"\r\n        try:\r\n            with open(output_path/file_name) as json_file:\r\n                data = json.load(json_file)\r\n\r\n        except FileNotFoundError:\r\n            metagenomics_counter.freq_process(input_path, k, output_path)\r\n            with open(output_path/file_name) as json_file:\r\n                data = json.load(json_file)\r\n\r\n        k_mer_list = pyVectorizer.all_kmers(k)\r\n        freq_fig = go.Figure(data=[go.Scatter(\r\n            # x=[i for i in range(len(data[1]))],\r\n            x=k_mer_list,\r\n            y=data[1],\r\n            mode='lines+markers')])\r\n        return freq_fig\r\n\r\n\r\n    def load_from_table(sort_by,selected_rows, current_page, page_size):\r\n        print(\"inside load from table\")\r\n        # Import settings data from csv\r\n        SETTINGS_PATH = PATH.joinpath(\"settings\").resolve()\r\n        settings_df = pd.read_csv(SETTINGS_PATH.joinpath(\"sample_settings.csv\"))\r\n        settings_df['Index'] = range(1, len(settings_df) + 1)\r\n        settings_df = settings_df[[\"Index\",\"FASTA File \", \"Iterations\",\"k in kmer\",\"Autoencoder\",\"2D\",\"3D\",\"Activation\"]]\r\n            \r\n        if len(sort_by):\r\n            dff = settings_df.sort_values(\r\n                sort_by[0]['column_id'],\r\n                ascending=sort_by[0]['direction'] == 'asc',\r\n                inplace=False\r\n            )\r\n        else:\r\n            dff = settings_df\r\n        # if selected_rows is not None and len(selected_rows) :\r\n            # print(dff.iloc[[selected_rows[0]]]['FASTA File '].tolist())\r\n        print(dff.iloc[[(current_page*page_size)+selected_rows[0]]])\r\n        fasta_name = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['FASTA File '].tolist()[0][:-6]\r\n        iterations = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['Iterations'].tolist()[0]\r\n        kmer = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['k in kmer'].tolist()[0]\r\n        ae = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['Autoencoder'].tolist()[0]\r\n        dim2 = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['2D'].tolist()[0]\r\n        dim3 = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['3D'].tolist()[0]\r\n        act = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['Activation'].tolist()[0]\r\n\r\n        print(fasta_name)\r\n\r\n        dim=\"\"\r\n        if  isinstance(dim2, str):\r\n            dim = \"2d\"\r\n        else:\r\n            dim = \"3d\"\r\n\r\n        freq_counter_url = [\r\n            \"results\",\r\n            str(fasta_name),\r\n        ]\r\n        freq_counter_path = PATH.joinpath(*freq_counter_url)\r\n\r\n        freq_fig = freq_count(\"\",int(kmer),freq_counter_path)\r\n        donut_fig = calc_acgt_count(\"\", int(kmer), freq_counter_path)\r\n\r\n        scatter_url = [\r\n            \"results\",\r\n            str(fasta_name),\r\n            str(dim) + \"_$$_\" + str(kmer) + \"_$$_\" + str(iterations) + \"_$$_\" + str(ae) + \"_$$_\" + str(act) + \".csv\",\r\n        ]\r\n        results_path = PATH.joinpath(*scatter_url)\r\n        embedding_df = pd.read_csv(\r\n            results_path, index_col=0, encoding=\"ISO-8859-1\"\r\n        )\r\n       \r\n        sampled_embedding_df = embedding_df[embedding_df['sampled']]\r\n        sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')]=sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')].apply(lambda x : x.fillna(value=\"NA\"))\r\n\r\n        \r\n\r\n        if int(dim[0]) == 2:\r\n            scatter_figure = generate_figure_2d_image(sampled_embedding_df)\r\n            graph_title = \"Sequence data reduced to 2D Representation \"\r\n            hybrid_plot = generate_hybrid_2d_fig(sampled_embedding_df)\r\n        else:\r\n            scatter_figure = generate_figure_image(sampled_embedding_df)\r\n            graph_title = \"Sequence data reduced to 3D Representation \"\r\n            hybrid_plot = generate_hybrid_fig(sampled_embedding_df)\r\n        domain_donut_figure = generate_domain_donut(embedding_df)\r\n        phylum_donut_figure = generate_phylum_donut(embedding_df)\r\n        class_donut_figure = generate_class_donut(embedding_df)\r\n        order_donut_figure = generate_order_donut(embedding_df)\r\n        family_donut_figure = generate_family_donut(embedding_df)\r\n        genus_donut_figure = generate_genus_donut(embedding_df)\r\n        species_donut_figure = generate_species_donut(embedding_df)\r\n        violin_plot = generate_violin_plot(embedding_df)\r\n        \r\n\r\n        return scatter_figure, donut_fig, freq_fig, graph_title, hybrid_plot,domain_donut_figure,phylum_donut_figure,class_donut_figure,order_donut_figure,family_donut_figure,genus_donut_figure,species_donut_figure, violin_plot, html.Div()\r\n\r\n    def generate_taxa_donut():\r\n        \r\n        labels = ['mycobacterium avium','mycobacterium bovis','mycobacterium tuberculosis','Clostridium botulinum','Clostridium perfringens', 'Clostridium tetani']\r\n        values = [4500, 2500, 1053, 500, 20,80]\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_domain_donut(df):\r\n        df = df.groupby('lin_7').size().reset_index(name='counts')\r\n        labels = list(df['lin_7'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Domain Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_phylum_donut(df):\r\n        df = df.groupby('lin_5').size().reset_index(name='counts')\r\n        labels = list(df['lin_5'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Phylum Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_class_donut(df):\r\n        df = df.groupby('lin_4').size().reset_index(name='counts')\r\n        labels = list(df['lin_4'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Class Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_order_donut(df):\r\n        df = df.groupby('lin_3').size().reset_index(name='counts')\r\n        labels = list(df['lin_3'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Order Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_family_donut(df):\r\n        df = df.groupby('lin_2').size().reset_index(name='counts')\r\n        labels = list(df['lin_2'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Family Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_genus_donut(df):\r\n        df = df.groupby('lin_1').size().reset_index(name='counts')\r\n        labels = list(df['lin_1'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Genus Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n    def generate_species_donut(df):\r\n        df = df.groupby('lin_0').size().reset_index(name='counts')\r\n        labels = list(df['lin_0'])\r\n        values = list(df['counts'])\r\n        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\r\n        fig.update_layout(title=\"Species Summary\")\r\n        fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\r\n        return fig\r\n\r\n    def generate_violin_plot(df):\r\n        species = df.lin_0.unique().tolist()\r\n\r\n        #gc_content=(g+c)*100/(a+t+g+c)\r\n        #df = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\")\r\n\r\n        fig = go.Figure()\r\n\r\n\r\n        for s in species:\r\n            fig.add_trace(go.Violin(x=df['lin_0'][df['lin_0'] == s],\r\n                                    y=((df['g']+df['c'])*100/(df['a']+df['c']+df['g']+df['t']))[df['lin_0'] == s],\r\n                                    name=s,\r\n                                    box_visible=True,\r\n                                    meanline_visible=True))\r\n\r\n\r\n        return fig\r\n\r\n\r\n    @app.callback(\r\n         [Output(\"tsne-plot\", \"figure\"),\r\n         Output(\"tsne-graph-title\", \"children\"),],\r\n        [Input(\"pcatsne-submit-btn\", \"n_clicks\"),],\r\n        [\r\n            State(\"pcatsne-fasta-dropdown\", \"value\"),\r\n            State(\"slider-iterations\", \"value\"),\r\n            State(\"slider-perplexity\", \"value\"),\r\n            State(\"slider-pca-dimension\", \"value\"),\r\n            State(\"slider-learning-rate\", \"value\"),\r\n            State(\"pcatsne-kmer\", \"value\"),\r\n            State(\"pcatsne-dim\", \"value\"),\r\n        ],\r\n    )\r\n    def display_tsne_plot(\r\n        pca_tsne_btn,\r\n        fasta_name,\r\n        iterations,\r\n        perplexity,\r\n        pca_dim,\r\n        lr,\r\n        kmer,\r\n        dim,\r\n    ):\r\n\r\n            input_url = [\r\n                \"fasta_files\",\r\n                str(fasta_name) + \".fasta\",\r\n            ]\r\n            input_file_path = PATH.joinpath(*input_url)\r\n\r\n            data_url = [\r\n                \"results\",\r\n                str(fasta_name),\r\n                \"tsne\",\r\n                str(dim)+\"_$$_\"+str(kmer)+\"_$$_\"+\"pca\"+\"_$$_\"+str(pca_dim)+\"_$$_\"+\"tsne\"+\"_$$_\"+str(iterations)+\"_$$_\"+str(perplexity)+\"_$$_\"+str(lr)+\".csv\",\r\n            ]\r\n            results_path = PATH.joinpath(*data_url)\r\n\r\n            if not os.path.exists(\"results/\"+str(fasta_name)+\"/tsne\"):\r\n                os.makedirs(\"results/\"+str(fasta_name)+\"/tsne\")\r\n\r\n\r\n            try:\r\n                embedding_df = pd.read_csv(\r\n                    results_path, index_col=0, encoding=\"ISO-8859-1\"\r\n                )\r\n\r\n            except FileNotFoundError as error:\r\n                print(\r\n                    error,\r\n                    \"\\nThe dataset was not found. Please generate it using generate_demo_embeddings.py\",\r\n                )\r\n\r\n                run_tsne.process(input_file_path, int(kmer), int(pca_dim), int(dim[0]), int(iterations), int(lr), int(perplexity), results_path)\r\n\r\n                print(\"out of process\")\r\n                embedding_df = pd.read_csv(\r\n                    results_path, index_col=0, encoding=\"ISO-8859-1\"\r\n                )\r\n                print(\"read csv\")\r\n\r\n\r\n\r\n            dim = int(dim[0])\r\n            if dim==2:\r\n                figure = generate_figure_2d_image(embedding_df)\r\n                graph_title = \"Sequence data reduced to 2D Representation \"\r\n\r\n            else:\r\n                figure = generate_figure_image(embedding_df)\r\n                graph_title = \"Sequence data reduced to 3D Representation \"\r\n\r\n\r\n            return figure, graph_title\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- demo.py	(revision e747a380003ec7445d7328f7014926086a17cd4f)
+++ demo.py	(date 1618241029446)
@@ -37,19 +37,16 @@
 if not os.path.exists(UPLOAD_DIRECTORY):
     os.makedirs(UPLOAD_DIRECTORY)
 
-
 # get relative data folder
 PATH = pathlib.Path(__file__).parent
 DATA_PATH = PATH.joinpath("data").resolve()
 
-
-
 # Import settings data from csv
 SETTINGS_PATH = PATH.joinpath("settings").resolve()
 settings_df = pd.read_csv(SETTINGS_PATH.joinpath("sample_settings.csv"))
 settings_df['Index'] = range(1, len(settings_df) + 1)
-settings_df = settings_df[["Index","FASTA File ", "Iterations","k in kmer","Autoencoder","2D","3D","Activation"]]
-#print(settings_df)
+settings_df = settings_df[["Index", "FASTA File ", "Iterations", "k in kmer", "Autoencoder", "2D", "3D", "Activation"]]
+# print(settings_df)
 
 PAGE_SIZE = 5
 
@@ -125,11 +122,13 @@
     )
 
 
-AE_Dict = {'3': ['[32,x,32]', '[32,4,x,4,32]', '[32,16,x,16,32]'], '4': ['[136,64,x,64,136]', '[136,32,x,32,136]', '[136,16,x,16,136]']}
+AE_Dict = {'3': ['[32,x,32]', '[32,4,x,4,32]', '[32,16,x,16,32]'],
+           '4': ['[136,64,x,64,136]', '[136,32,x,32,136]', '[136,16,x,16,136]']}
 kmer = list(AE_Dict.keys())
 AE_Options = AE_Dict[kmer[0]]
 uploaded_fasta_files = [f.split('.')[0] for f in listdir("fasta_files") if isfile(join("fasta_files", f))]
 
+
 def create_layout(app):
     # Actual layout of the app
     return html.Div(
@@ -151,11 +150,12 @@
                             ),
                             html.H3(
                                 "MetaG",
-                                #className="header_title",
+                                # className="header_title",
                                 id="meta-app-title",
-                                style={'font-family': 'cursive', 'color':'Black', 'padding-left':"200px !important", 'text-shadow': '2px 2px #ff0000'},
+                                style={'font-family': 'cursive', 'color': 'Black', 'padding-left': "200px !important",
+                                       'text-shadow': '2px 2px #ff0000'},
                             ),
-                            
+
                         ],
                         className="three columns header_img",
                     ),
@@ -165,7 +165,7 @@
                                 "Comprehensive Metagenomics Analysis Tool",
                                 className="header_title",
                                 id="app-title",
-                                style={'font-family': 'arial', 'color':'Black'},
+                                style={'font-family': 'arial', 'color': 'Black'},
                             )
                         ],
                         className="nine columns header_title_container",
@@ -175,565 +175,738 @@
             html.Div(
                 className="row background",
                 children=[
-                dcc.Loading(
-            id="loading-1",
-            type="default",
-            children=html.Div(id="loading-output-1")
-        ),
-                html.Div(
-                    className="twelve columns",
-                    id="tab-div",
-                    
+                    dcc.Loading(
+                        id="loading-1",
+                        type="default",
+                        children=html.Div(id="loading-output-1")
+                    ),
+                    html.Div(
+                        className="twelve columns",
+                        id="tab-div",
+
                         children=[
-                            Card(dcc.Tabs(id="main-tabs", value='tab1', children=[dcc.Tab(label='Basic Autoencoder Analysis', value='tab1',
-                                children=[
-                                    # Demo Description
-            html.Div(
-                className="row background",
-                id="pcatsne-explanation",
-                style={"padding": "50px 45px"},
-                children=[
-                    
-                    html.Div(
-                        id="description-text", children=dcc.Markdown(demo_intro_md)
-                    ),
-                ],
-            ),
-            # Body
-            html.Div(
-                className="row background",
-                style={"padding": "10px"},
-                children=[
-                    html.Div(
-                        style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "background-color":"#E6E5E6"},
-                        className="three columns",
-                        children=[
-                            Card(dcc.Tabs(id="tabs", value='tab1', children=[dcc.Tab(label='Settings', value='tab1', id ="basic-analysis",
-                                children=
+                            Card(dcc.Tabs(id="main-tabs", value='tab1',
+                                          children=[dcc.Tab(label='Basic Autoencoder Analysis', value='tab1',
+                                                            children=[
+                                                                # Demo Description
+                                                                html.Div(
+                                                                    className="row background",
+                                                                    id="pcatsne-explanation",
+                                                                    style={"padding": "50px 45px"},
+                                                                    children=[
+
+                                                                        html.Div(
+                                                                            id="description-text",
+                                                                            children=dcc.Markdown(demo_intro_md)
+                                                                        ),
+                                                                    ],
+                                                                ),
+                                                                # Body
+                                                                html.Div(
+                                                                    className="row background",
+                                                                    style={"padding": "10px"},
+                                                                    children=[
+                                                                        html.Div(
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            className="three columns",
+                                                                            children=[
+                                                                                Card(dcc.Tabs(id="tabs", value='tab1',
+                                                                                              children=[dcc.Tab(
+                                                                                                  label='Settings',
+                                                                                                  value='tab1',
+                                                                                                  id="basic-analysis",
+                                                                                                  children=
 
-                                [
-                                    html.Hr(),
-                                    html.P("Metagenomic sample"),
-                                    dcc.Dropdown(
-                                        id="fasta-dropdown",
-                                        style={"margin-top": "50px"},
-                                        searchable=False,
-                                        clearable=False,
-                                        options=[],
-                                        placeholder="Select a dataset",
-                                        value="Synthetic1",
-                                    ),
-                                    html.Br(),
-                                    html.Hr(),
-                                    html.P("Choose Training Sample Percentage"),
-                                    dcc.Input(id="training_downsample", type="number", value=60, min=10, max=100, step=5),
-                                    html.Br(),
-                                    html.Hr(),
-                                    
-                                     html.Div([
-                                        html.P("Choose Iterations"),
-                                        dcc.Slider(
-                                            id = "iterations-slider",
-                                            min=200,
-                                            max=7000,
-                                            step=50,
-                                            value=2950,
-                                        ),
-                                        html.Div(id='slider-output-container')
-                                    ]),
-                                     html.Hr(),
-                                     html.P("Choose k in k-mers"),
-                                    dcc.Dropdown(
-                                        id = "kmer",
-                                        options=[{'label':k, 'value':k} for k in kmer],
-                                        value='4'
-                                    )  ,
-                                    html.Hr(),
-                                    html.P("Choose Autoencoder"),
-                                    dcc.Dropdown(
-                                        id='ae-dropdown',
-                                        value= "[136,64,x,64,136]"
-                                    ),
-                                     html.Hr(),
-                                    html.P("Choose Dimensions"),
-                                    dcc.RadioItems(
-                                        id = "dimension",
-                                        inputStyle ={'margin-right':'30px'},
-                                        options=[
-                                            {'label': '2D    ', 'value': '2d'},
-                                            {'label': '3D    ', 'value': '3d'},
-                                           
-                                        ],
-                                        value='2d'
-                                    )  ,
-                                     html.Hr(),
-                                    html.P("Activation Function"),
-                                    dcc.RadioItems(
-                                        id = "activation",
-                                        inputStyle ={'margin-right':'30px'},
-                                        options=[
-                                            {'label': 'Sigmoid', 'value': 'sigmoid'},
-                                            {'label': 'Tanh', 'value': 'tanh'},
-                                        ],
-                                        value='sigmoid'
-                                    )  ,
-                                    html.Hr(),
-                                    dbc.Button("Submit", id="submit-btn", color="primary", className="mr-1", style={"color":"White", "background-color":"#32CD32", "margin": "0 auto", "display": "block"}),
-                                    #dbc.Alert(id='submit-alert'),
-                                    html.Hr(),
-                                   html.Div( id='submit-alert'),
-                                    
-                                ]),
-                                dcc.Tab(label='Data', value='tab2', children=[
-                        
-                        html.Br(),
-                        html.P(
-                            "FASTA file containing the sequence reads of the metagenomic sample is required to do the analysis and prompt the visualizations."
-                        ),
-                         html.Br(),
-                        html.Img(src='assets/reads.PNG', style={"width":"100%", "height":"50%", "padding-bottom":"20px"}),
-                        html.Br(),
-                        html.P("Please upload your FASTA file containing metagenomic shotgun sequence reads in order to get the visualizations."),
-                        html.Br(),
-                        html.P("After uploading, please go to the settings tab and select the uploaded FASTA file from the dropdown menu and add the settings."),
-                        
-                        
-                        html.Span(
-                            className="control-label", children=[html.H5("Upload the sequence file")]
-                        ),
-                        dcc.Upload(
-                            id="upload-data",
-                            className="upload-component",
-                            children=html.Div(
-                                ["Drag and Drop or ", html.A("Select Files")]
-                            ),
-                            style={"padding-bottom":"400px"},
-                        ),
-                        html.Div(id='upload-output'),
-                        ]),
-                                ])
-                            )
-                        ],
-                    ),
-                     html.Div(
-                        className="nine columns",
-                        
-                        children=[
-                            html.Div(
-                            style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 70px 10px", "background-color":"#E6E5E6"},
-                            children=[
-                            html.H3(
-                                        className="graph-title",
-                                        children="Current Results",
-                                    ),
-                            dash_table.DataTable(
-                                id='table-paging-and-sorting',
-                                columns=[
-                                    {'name': i, 'id': i, 'deletable': True} for i in settings_df.columns
-                                ],
-                                page_current=0,
-                                page_size=PAGE_SIZE,
-                                page_action='custom',
-                                row_selectable="single",
-                                selected_rows=[0],
-                                sort_action='custom',
-                                sort_mode='single',
-                                sort_by=[],
-                                style_as_list_view=True,
-                                style_header={'backgroundColor': 'rgb(30, 30, 30)', 'fontWeight': 'bold'},
-                                
-                                style_cell={
-                                    'backgroundColor': 'rgb(50, 50, 50)',
-                                    'color': 'white'
-                                },
-                            ),
-                            ],
-                            ),
-                        ],
-                    ),
-                     html.Br(),
-                    
-                    html.Br(),
-                     html.Div(
-                         className="nine columns",
-                         style = {"padding-top":"20px"},
-                         children=[
-                    html.Div(
-                        
-                        style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                        children=[
-                            html.H3(    id = "dr-graph-title",
-                                        className="graph-title",
-                                        children="Sequence data reduced Representation ",
-                                    ),
-                            dcc.Graph(id="graph-3d-plot-tsne", style={"height": "98vh", "margin-bottom":"50px"})
-                        ],
-                    ),
-                ],
-            ),
+                                                                                                  [
+                                                                                                      html.Hr(),
+                                                                                                      html.P(
+                                                                                                          "Metagenomic sample"),
+                                                                                                      dcc.Dropdown(
+                                                                                                          id="fasta-dropdown",
+                                                                                                          style={
+                                                                                                              "margin-top": "50px"},
+                                                                                                          searchable=False,
+                                                                                                          clearable=False,
+                                                                                                          options=[],
+                                                                                                          placeholder="Select a dataset",
+                                                                                                          value="Synthetic1",
+                                                                                                      ),
+                                                                                                      html.Br(),
+                                                                                                      html.Hr(),
+                                                                                                      html.P(
+                                                                                                          "Choose Training Sample Percentage"),
+                                                                                                      dcc.Input(
+                                                                                                          id="training_downsample",
+                                                                                                          type="number",
+                                                                                                          value=60,
+                                                                                                          min=10,
+                                                                                                          max=100,
+                                                                                                          step=5),
+                                                                                                      html.Br(),
+                                                                                                      html.Hr(),
+
+                                                                                                      html.Div([
+                                                                                                          html.P(
+                                                                                                              "Choose Iterations"),
+                                                                                                          dcc.Slider(
+                                                                                                              id="iterations-slider",
+                                                                                                              min=200,
+                                                                                                              max=7000,
+                                                                                                              step=50,
+                                                                                                              value=2950,
+                                                                                                          ),
+                                                                                                          html.Div(
+                                                                                                              id='slider-output-container')
+                                                                                                      ]),
+                                                                                                      html.Hr(),
+                                                                                                      html.P(
+                                                                                                          "Choose k in k-mers"),
+                                                                                                      dcc.Dropdown(
+                                                                                                          id="kmer",
+                                                                                                          options=[{
+                                                                                                                       'label': k,
+                                                                                                                       'value': k}
+                                                                                                                   for k
+                                                                                                                   in
+                                                                                                                   kmer],
+                                                                                                          value='4'
+                                                                                                      ),
+                                                                                                      html.Hr(),
+                                                                                                      html.P(
+                                                                                                          "Choose Autoencoder"),
+                                                                                                      dcc.Dropdown(
+                                                                                                          id='ae-dropdown',
+                                                                                                          value="[136,64,x,64,136]"
+                                                                                                      ),
+                                                                                                      html.Hr(),
+                                                                                                      html.P(
+                                                                                                          "Choose Dimensions"),
+                                                                                                      dcc.RadioItems(
+                                                                                                          id="dimension",
+                                                                                                          inputStyle={
+                                                                                                              'margin-right': '30px'},
+                                                                                                          options=[
+                                                                                                              {
+                                                                                                                  'label': '2D    ',
+                                                                                                                  'value': '2d'},
+                                                                                                              {
+                                                                                                                  'label': '3D    ',
+                                                                                                                  'value': '3d'},
+
+                                                                                                          ],
+                                                                                                          value='2d'
+                                                                                                      ),
+                                                                                                      html.Hr(),
+                                                                                                      html.P(
+                                                                                                          "Activation Function"),
+                                                                                                      dcc.RadioItems(
+                                                                                                          id="activation",
+                                                                                                          inputStyle={
+                                                                                                              'margin-right': '30px'},
+                                                                                                          options=[
+                                                                                                              {
+                                                                                                                  'label': 'Sigmoid',
+                                                                                                                  'value': 'sigmoid'},
+                                                                                                              {
+                                                                                                                  'label': 'Tanh',
+                                                                                                                  'value': 'tanh'},
+                                                                                                          ],
+                                                                                                          value='sigmoid'
+                                                                                                      ),
+                                                                                                      html.Hr(),
+                                                                                                      dbc.Button(
+                                                                                                          "Submit",
+                                                                                                          id="submit-btn",
+                                                                                                          color="primary",
+                                                                                                          className="mr-1",
+                                                                                                          style={
+                                                                                                              "color": "White",
+                                                                                                              "background-color": "#32CD32",
+                                                                                                              "margin": "0 auto",
+                                                                                                              "display": "block"}),
+                                                                                                      # dbc.Alert(id='submit-alert'),
+                                                                                                      html.Hr(),
+                                                                                                      html.Div(
+                                                                                                          id='submit-alert'),
+
+                                                                                                  ]),
+                                                                                                        dcc.Tab(
+                                                                                                            label='Data',
+                                                                                                            value='tab2',
+                                                                                                            children=[
+
+                                                                                                                html.Br(),
+                                                                                                                html.P(
+                                                                                                                    "FASTA file containing the sequence reads of the metagenomic sample is required to do the analysis and prompt the visualizations."
+                                                                                                                ),
+                                                                                                                html.Br(),
+                                                                                                                html.Img(
+                                                                                                                    src='assets/reads.PNG',
+                                                                                                                    style={
+                                                                                                                        "width": "100%",
+                                                                                                                        "height": "50%",
+                                                                                                                        "padding-bottom": "20px"}),
+                                                                                                                html.Br(),
+                                                                                                                html.P(
+                                                                                                                    "Please upload your FASTA file containing metagenomic shotgun sequence reads in order to get the visualizations."),
+                                                                                                                html.Br(),
+                                                                                                                html.P(
+                                                                                                                    "After uploading, please go to the settings tab and select the uploaded FASTA file from the dropdown menu and add the settings."),
+
+                                                                                                                html.Span(
+                                                                                                                    className="control-label",
+                                                                                                                    children=[
+                                                                                                                        html.H5(
+                                                                                                                            "Upload the sequence file")]
+                                                                                                                ),
+                                                                                                                dcc.Upload(
+                                                                                                                    id="upload-data",
+                                                                                                                    className="upload-component",
+                                                                                                                    children=html.Div(
+                                                                                                                        [
+                                                                                                                            "Drag and Drop or ",
+                                                                                                                            html.A(
+                                                                                                                                "Select Files")]
+                                                                                                                    ),
+                                                                                                                    style={
+                                                                                                                        "padding-bottom": "400px"},
+                                                                                                                ),
+                                                                                                                html.Div(
+                                                                                                                    id='upload-output'),
+                                                                                                            ]),
+                                                                                                        ])
+                                                                                     )
+                                                                            ],
+                                                                        ),
+                                                                        html.Div(
+                                                                            className="nine columns",
+
+                                                                            children=[
+                                                                                html.Div(
+                                                                                    style={"border": "1px solid",
+                                                                                           "box-shadow": "5px 5px 5px #888888",
+                                                                                           "border-radius": "5px",
+                                                                                           "padding": "10px 10px 70px 10px",
+                                                                                           "background-color": "#E6E5E6"},
+                                                                                    children=[
+                                                                                        html.H3(
+                                                                                            className="graph-title",
+                                                                                            children="Current Results",
+                                                                                        ),
+                                                                                        dash_table.DataTable(
+                                                                                            id='table-paging-and-sorting',
+                                                                                            columns=[
+                                                                                                {'name': i, 'id': i,
+                                                                                                 'deletable': True} for
+                                                                                                i in settings_df.columns
+                                                                                            ],
+                                                                                            page_current=0,
+                                                                                            page_size=PAGE_SIZE,
+                                                                                            page_action='custom',
+                                                                                            row_selectable="single",
+                                                                                            selected_rows=[0],
+                                                                                            sort_action='custom',
+                                                                                            sort_mode='single',
+                                                                                            sort_by=[],
+                                                                                            style_as_list_view=True,
+                                                                                            style_header={
+                                                                                                'backgroundColor': 'rgb(30, 30, 30)',
+                                                                                                'fontWeight': 'bold'},
+
+                                                                                            style_cell={
+                                                                                                'backgroundColor': 'rgb(50, 50, 50)',
+                                                                                                'color': 'white'
+                                                                                            },
+                                                                                        ),
+                                                                                    ],
+                                                                                ),
+                                                                            ],
+                                                                        ),
+                                                                        html.Br(),
+
+                                                                        html.Br(),
+                                                                        html.Div(
+                                                                            className="nine columns",
+                                                                            style={"padding-top": "20px"},
+                                                                            children=[
+                                                                                html.Div(
+
+                                                                                    style={"border": "1px solid",
+                                                                                           "box-shadow": "5px 5px 5px #888888",
+                                                                                           "border-radius": "5px",
+                                                                                           "padding": "10px 10px 10px 10px",
+                                                                                           "background-color": "#E6E5E6"},
+                                                                                    children=[
+                                                                                        html.H3(id="dr-graph-title",
+                                                                                                className="graph-title",
+                                                                                                children="Sequence data reduced Representation ",
+                                                                                                ),
+                                                                                        dcc.Graph(
+                                                                                            id="graph-3d-plot-tsne",
+                                                                                            style={"height": "98vh",
+                                                                                                   "margin-bottom": "50px"})
+                                                                                    ],
+                                                                                ),
+                                                                            ],
+                                                                        ),
 
-                    html.Div(
-                         className="nine columns",
-                         style = {"padding-top":"20px"},
-                         children=[
-                    html.Div(
-                        style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                        children=[
-                            html.H3(
-                                        className="graph-title",
-                                        children="Metagenomic Nucleotide Frequencies",
-                                        
-                                    ),
-                            dcc.Graph(id='example-graph-2', style={"height": "98vh","margin-bottom":"50px"})
-                        ],
-                    ),
-                ],
-            ),
-                    html.Div(
-                         className="nine columns",
-                         style = {"padding-top":"20px"},
-                         children=[
-                     html.Div(
-                        
-                        style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6", "margin-left":"320px","margin-right":"-320px"},
-                        children=[
-                            html.H3(
-                                        className="graph-title",
-                                        children="Sequence Content",
-                                        
-                                    ),
-                            dcc.Graph(id='ACGT_donut_chart', style={"height": "98vh", "margin-bottom":"50px"})
-                        ],
-                    ),
-                ],
-            ),
-                    html.Div(
-                        className="twelve columns",
-                        id="footer",
-                        children=[
-                            html.Div(style={"height":"100px"}),
-                        ],
-                    ),
-                    html.Div(
-                        className="three columns",
-                        id="euclidean-distance",
-                        children=[
-                            Card(
-                                style={"padding": "5px"},
-                                children=[
-                                    
-                                    html.Div(id="div-plot-click-image"),
-                                    html.Div(id="div-plot-click-wordemb"),
-                                ],
-                            )
-                        ],
-                    ),
-                    
-                ],
-            ),
+                                                                        html.Div(
+                                                                            className="nine columns",
+                                                                            style={"padding-top": "20px"},
+                                                                            children=[
+                                                                                html.Div(
+                                                                                    style={"border": "1px solid",
+                                                                                           "box-shadow": "5px 5px 5px #888888",
+                                                                                           "border-radius": "5px",
+                                                                                           "padding": "10px 10px 10px 10px",
+                                                                                           "background-color": "#E6E5E6"},
+                                                                                    children=[
+                                                                                        html.H3(
+                                                                                            className="graph-title",
+                                                                                            children="Metagenomic Nucleotide Frequencies",
+
+                                                                                        ),
+                                                                                        dcc.Graph(id='example-graph-2',
+                                                                                                  style={
+                                                                                                      "height": "98vh",
+                                                                                                      "margin-bottom": "50px"})
+                                                                                    ],
+                                                                                ),
+                                                                            ],
+                                                                        ),
+                                                                        html.Div(
+                                                                            className="nine columns",
+                                                                            style={"padding-top": "20px"},
+                                                                            children=[
+                                                                                html.Div(
+
+                                                                                    style={"border": "1px solid",
+                                                                                           "box-shadow": "5px 5px 5px #888888",
+                                                                                           "border-radius": "5px",
+                                                                                           "padding": "10px 10px 10px 10px",
+                                                                                           "background-color": "#E6E5E6",
+                                                                                           "margin-left": "320px",
+                                                                                           "margin-right": "-320px"},
+                                                                                    children=[
+                                                                                        html.H3(
+                                                                                            className="graph-title",
+                                                                                            children="Sequence Content",
+
+                                                                                        ),
+                                                                                        dcc.Graph(id='ACGT_donut_chart',
+                                                                                                  style={
+                                                                                                      "height": "98vh",
+                                                                                                      "margin-bottom": "50px"})
+                                                                                    ],
+                                                                                ),
+                                                                            ],
+                                                                        ),
+                                                                        html.Div(
+                                                                            className="twelve columns",
+                                                                            id="footer",
+                                                                            children=[
+                                                                                html.Div(style={"height": "100px"}),
+                                                                            ],
+                                                                        ),
+                                                                        html.Div(
+                                                                            className="three columns",
+                                                                            id="euclidean-distance",
+                                                                            children=[
+                                                                                Card(
+                                                                                    style={"padding": "5px"},
+                                                                                    children=[
+
+                                                                                        html.Div(
+                                                                                            id="div-plot-click-image"),
+                                                                                        html.Div(
+                                                                                            id="div-plot-click-wordemb"),
+                                                                                    ],
+                                                                                )
+                                                                            ],
+                                                                        ),
+
+                                                                    ],
+                                                                ),
 
-                                ],
-                            ),
-                            dcc.Tab(label='Taxanomic Analysis', value='tab2', children=[
-                                html.Div(
-                                style={"padding": "10px"},
-                                children=[
-                                html.Div(
-                                    className="row background",
-                                    id="taxa-explanation",
-                                    style={"padding": "50px 45px"},
-                                    children=[
-                                        
-                                        html.Div(
-                                            id="taxa", children=dcc.Markdown(Taxa_intro_md)
-                                        ),
-                                    ],
-                                ),
-                                html.Div(
-                         className="twelve columns",
-                         style = {"padding-top":"20px"},
-                         children=[
-                            
-                            html.Br(),
-                                    html.Div(
-                                        
-                                        children=[
-                                    html.Div(
-                                        
-                                        style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                        children=[
-                                            html.H3(    id = "hybrid-graph-title",
-                                                        className="graph-title",
-                                                        children="Reduced Representation with Taxonomy Details ",
-                                                    ),
-                                            dcc.Graph(id="hybrid-plot", style={"height": "98vh", "margin-bottom":"50px"})
-                                        ],
-                                    ),
-                                ],
-                            ),
-                            
-                            html.Div(
-                                style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                children=[
-                                dcc.Graph(id='domain_donut_chart', style={"height": "49vh","width": "49%",  "display":"inline-block", "padding-right":"2%"}),
-                                dcc.Graph(id='phylum_donut_chart', style={"height": "49vh","width": "49%", "display":"inline-block"})
-                            ]),
-                            html.Div(
-                                style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                children=[
-                                dcc.Graph(id='class_donut_chart', style={"height": "49vh","width": "49%",  "display":"inline-block", "padding-right":"2%"}),
-                                dcc.Graph(id='order_donut_chart', style={"height": "49vh", "width": "49%","display":"inline-block"})
-                            ]),
-                            html.Div(
-                                style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                children=[
-                                dcc.Graph(id='family_donut_chart', style={"height": "49vh","width": "49%",  "display":"inline-block", "padding-right":"2%"}),
-                                dcc.Graph(id='genus_donut_chart', style={"height": "49vh","width": "49%", "display":"inline-block"})
-                            ]),
-                            html.Div(
-                                style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                children=[
-                                dcc.Graph(id='species_donut_chart', style={"height": "75vh",  "align":"center"}),
-                
-                            ]),
-                            
-                            
-                ],
-            ),
-                                    html.Div(
-                                                className="twelve columns",
-                                                style = {"padding-top":"20px"},
-                                                children=[
-                                                    html.Div(
-                                                        
-                                                        style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                                        children=[
-                                                            html.H3(
-                                                                        className="graph-title",
-                                                                        children="GC content Distribution",
-                                                                        
-                                                                    ),
-                                                            dcc.Graph(id='violin_plot', style={"height": "98vh", "margin-bottom":"50px"})
-                                                        ],
-                                                    ),
-                                        ],
-                                    ),
-                                ]
-                                ),
-                            ],
-                            ),
-                            dcc.Tab(label='t-SNE / PCA Analysis', value='tab3', children=[
-                                html.Div(
-                                style={"padding": "10px"},
-                                children=[
-                               
-                                html.Div(
-                                    className="row background",
-                                    id="demo-explanation",
-                                    style={"padding": "50px 45px"},
-                                    children=[
-                                        
-                                        html.Div(
-                                            id="pcatsne-intro", children=dcc.Markdown(PCATSNE_intro_md)
-                                        ),
-                                    ],
-                                ),
-                                # Body
-                                html.Div(
-                                    className="row background",
-                                    style={"padding": "10px"},
-                                    children=[
-                                        html.Div(
-                                            style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "background-color":"#E6E5E6"},
-                                            className="three columns",
-                                            children=[
-                                                Card(id="pcatsne-tabs", 
-                                                    children=
+                                                            ],
+                                                            ),
+                                                    dcc.Tab(label='Taxanomic Analysis', value='tab2', children=[
+                                                        html.Div(
+                                                            style={"padding": "10px"},
+                                                            children=[
+                                                                html.Div(
+                                                                    className="row background",
+                                                                    id="taxa-explanation",
+                                                                    style={"padding": "50px 45px"},
+                                                                    children=[
+
+                                                                        html.Div(
+                                                                            id="taxa",
+                                                                            children=dcc.Markdown(Taxa_intro_md)
+                                                                        ),
+                                                                    ],
+                                                                ),
+                                                                html.Div(
+                                                                    className="twelve columns",
+                                                                    style={"padding-top": "20px"},
+                                                                    children=[
+
+                                                                        html.Br(),
+                                                                        html.Div(
+
+                                                                            children=[
+                                                                                html.Div(
+
+                                                                                    style={"border": "1px solid",
+                                                                                           "box-shadow": "5px 5px 5px #888888",
+                                                                                           "border-radius": "5px",
+                                                                                           "padding": "10px 10px 10px 10px",
+                                                                                           "background-color": "#E6E5E6"},
+                                                                                    children=[
+                                                                                        html.H3(id="hybrid-graph-title",
+                                                                                                className="graph-title",
+                                                                                                children="Reduced Representation with Taxonomy Details ",
+                                                                                                ),
+                                                                                        dcc.Graph(id="hybrid-plot",
+                                                                                                  style={
+                                                                                                      "height": "98vh",
+                                                                                                      "margin-bottom": "50px"})
+                                                                                    ],
+                                                                                ),
+                                                                            ],
+                                                                        ),
+
+                                                                        html.Div(
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "padding": "10px 10px 10px 10px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            children=[
+                                                                                dcc.Graph(id='domain_donut_chart',
+                                                                                          style={"height": "49vh",
+                                                                                                 "width": "49%",
+                                                                                                 "display": "inline-block",
+                                                                                                 "padding-right": "2%"}),
+                                                                                dcc.Graph(id='phylum_donut_chart',
+                                                                                          style={"height": "49vh",
+                                                                                                 "width": "49%",
+                                                                                                 "display": "inline-block"})
+                                                                            ]),
+                                                                        html.Div(
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "padding": "10px 10px 10px 10px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            children=[
+                                                                                dcc.Graph(id='class_donut_chart',
+                                                                                          style={"height": "49vh",
+                                                                                                 "width": "49%",
+                                                                                                 "display": "inline-block",
+                                                                                                 "padding-right": "2%"}),
+                                                                                dcc.Graph(id='order_donut_chart',
+                                                                                          style={"height": "49vh",
+                                                                                                 "width": "49%",
+                                                                                                 "display": "inline-block"})
+                                                                            ]),
+                                                                        html.Div(
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "padding": "10px 10px 10px 10px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            children=[
+                                                                                dcc.Graph(id='family_donut_chart',
+                                                                                          style={"height": "49vh",
+                                                                                                 "width": "49%",
+                                                                                                 "display": "inline-block",
+                                                                                                 "padding-right": "2%"}),
+                                                                                dcc.Graph(id='genus_donut_chart',
+                                                                                          style={"height": "49vh",
+                                                                                                 "width": "49%",
+                                                                                                 "display": "inline-block"})
+                                                                            ]),
+                                                                        html.Div(
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "padding": "10px 10px 10px 10px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            children=[
+                                                                                dcc.Graph(id='species_donut_chart',
+                                                                                          style={"height": "75vh",
+                                                                                                 "align": "center"}),
+
+                                                                            ]),
+
+                                                                    ],
+                                                                ),
+                                                                html.Div(
+                                                                    className="twelve columns",
+                                                                    style={"padding-top": "20px"},
+                                                                    children=[
+                                                                        html.Div(
+
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "padding": "10px 10px 10px 10px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            children=[
+                                                                                html.H3(
+                                                                                    className="graph-title",
+                                                                                    children="GC content Distribution",
+
+                                                                                ),
+                                                                                dcc.Graph(id='violin_plot',
+                                                                                          style={"height": "98vh",
+                                                                                                 "margin-bottom": "50px"})
+                                                                            ],
+                                                                        ),
+                                                                    ],
+                                                                ),
+                                                            ]
+                                                        ),
+                                                    ],
+                                                            ),
+                                                    dcc.Tab(label='t-SNE / PCA Analysis', value='tab3', children=[
+                                                        html.Div(
+                                                            style={"padding": "10px"},
+                                                            children=[
+
+                                                                html.Div(
+                                                                    className="row background",
+                                                                    id="demo-explanation",
+                                                                    style={"padding": "50px 45px"},
+                                                                    children=[
+
+                                                                        html.Div(
+                                                                            id="pcatsne-intro",
+                                                                            children=dcc.Markdown(PCATSNE_intro_md)
+                                                                        ),
+                                                                    ],
+                                                                ),
+                                                                # Body
+                                                                html.Div(
+                                                                    className="row background",
+                                                                    style={"padding": "10px"},
+                                                                    children=[
+                                                                        html.Div(
+                                                                            style={"border": "1px solid",
+                                                                                   "box-shadow": "5px 5px 5px #888888",
+                                                                                   "border-radius": "5px",
+                                                                                   "background-color": "#E6E5E6"},
+                                                                            className="three columns",
+                                                                            children=[
+                                                                                Card(id="pcatsne-tabs",
+                                                                                     children=
 
-                                                    [   html.H5("t-SNE Settings"),
-                                                      
-                                                        html.Hr(),
-                                                        html.P("Metagenomic sample"),
-                                                        dcc.Dropdown(
-                                                            id="pcatsne-fasta-dropdown",
-                                                            searchable=False,
-                                                            clearable=False,
-                                                            options=[],
-                                                            placeholder="Select a dataset",
-                                                            value="Synthetic1",
-                                                        ),
-                                                        html.Hr(),
-                                                        html.P("Kmer"),
-                                                        dcc.Dropdown(
-                                                            id = "pcatsne-kmer",
-                                                            options=[{'label':k, 'value':k} for k in kmer],
-                                                            value='4'
-                                                        )  ,
-                                                        html.Hr(),
-                                                        html.P("Plot Dimension"),
-                                                        dcc.Dropdown(
-                                                            id = "pcatsne-dim",
-                                                            options=[{'label': '2D    ', 'value': '2d'},{'label': '3D    ', 'value': '3d'}],
-                                                            value='2d'
-                                                        )  ,
-                                                        html.Hr(),
-                                                        NamedSlider(
-                                                            name="Number Of Iterations",
-                                                            short="iterations",
-                                                            
-                                                            min=250,
-                                                            max=1000,
-                                                            step=None,
-                                                            val=500,
-                                                            marks={
-                                                                i: str(i) for i in [250, 500, 750, 1000]
-                                                            },
-                                                        ),
-                                                        NamedSlider(
-                                                            name="Perplexity",
-                                                            short="perplexity",
-                                                            
-                                                            min=3,
-                                                            max=100,
-                                                            step=None,
-                                                            val=30,
-                                                            marks={i: str(i) for i in [3, 10, 30, 50, 100]},
-                                                        ),
-                                                        NamedSlider(
-                                                            name="Initial PCA Dimensions",
-                                                            short="pca-dimension",
-                                                            
-                                                            min=20,
-                                                            max=100,
-                                                            step=10,
-                                                            val=50,
-                                                            marks={i: str(i) for i in [20,30,40,50,60,70,80,90,100]},
-                                                        ),
-                                                        NamedSlider(
-                                                            name="Learning Rate",
-                                                            short="learning-rate",
-                                                           
-                                                            min=20,
-                                                            max=200,
-                                                            step=None,
-                                                            val=100,
-                                                            marks={i: str(i) for i in [20,40,60,80,100,120, 140,160, 180, 200]},
-                                                        ),
-                                    
-                                                        
-                                                        dbc.Button("Submit", id="pcatsne-submit-btn", color="primary", className="mr-1", style={"color":"White", "background-color":"#32CD32", "margin": "0 auto", "display": "block"}),
-                                                        #dbc.Alert(id='submit-alert'),
-                                                        html.Hr(),
-                                                        html.Div( id='pcatsne-submit-alert'),
-                                                        
-                                                    ],
-                                                    
-                                                    )
-                                                
-                                            ],
-                                        ),
-                                        
-                                        html.Div(
-                                            className="nine columns",
-                                            children=[
-                                        html.Div(
-                                            
-                                            style={"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px", "padding":"10px 10px 10px 10px", "background-color":"#E6E5E6"},
-                                            children=[
-                                                html.H3(    id = "tsne-graph-title",
-                                                            className="graph-title",
-                                                            children="t-SNE Representation ",
-                                                        ),
-                                                dcc.Graph(id="tsne-plot", style={"height": "98vh", "margin-bottom":"50px"})
-                                            ],
-                                        ),
-                                    ],
-                                ),
-                                
-                                       
-                                        
-                                        
-                                        
-                                    ],
-                                ),
-                                ])])
-                            ]
-                            )
-                            )
+                                                                                     [html.H5("t-SNE Settings"),
+
+                                                                                      html.Hr(),
+                                                                                      html.P("Metagenomic sample"),
+                                                                                      dcc.Dropdown(
+                                                                                          id="pcatsne-fasta-dropdown",
+                                                                                          searchable=False,
+                                                                                          clearable=False,
+                                                                                          options=[],
+                                                                                          placeholder="Select a dataset",
+                                                                                          value="Synthetic1",
+                                                                                      ),
+                                                                                      html.Hr(),
+                                                                                      html.P("Kmer"),
+                                                                                      dcc.Dropdown(
+                                                                                          id="pcatsne-kmer",
+                                                                                          options=[
+                                                                                              {'label': k, 'value': k}
+                                                                                              for k in kmer],
+                                                                                          value='4'
+                                                                                      ),
+                                                                                      html.Hr(),
+                                                                                      html.P("Plot Dimension"),
+                                                                                      dcc.Dropdown(
+                                                                                          id="pcatsne-dim",
+                                                                                          options=[{'label': '2D    ',
+                                                                                                    'value': '2d'},
+                                                                                                   {'label': '3D    ',
+                                                                                                    'value': '3d'}],
+                                                                                          value='2d'
+                                                                                      ),
+                                                                                      html.Hr(),
+                                                                                      NamedSlider(
+                                                                                          name="Number Of Iterations",
+                                                                                          short="iterations",
+
+                                                                                          min=250,
+                                                                                          max=1000,
+                                                                                          step=None,
+                                                                                          val=500,
+                                                                                          marks={
+                                                                                              i: str(i) for i in
+                                                                                              [250, 500, 750, 1000]
+                                                                                          },
+                                                                                      ),
+                                                                                      NamedSlider(
+                                                                                          name="Perplexity",
+                                                                                          short="perplexity",
+
+                                                                                          min=3,
+                                                                                          max=100,
+                                                                                          step=None,
+                                                                                          val=30,
+                                                                                          marks={i: str(i) for i in
+                                                                                                 [3, 10, 30, 50, 100]},
+                                                                                      ),
+                                                                                      NamedSlider(
+                                                                                          name="Initial PCA Dimensions",
+                                                                                          short="pca-dimension",
+
+                                                                                          min=20,
+                                                                                          max=100,
+                                                                                          step=10,
+                                                                                          val=50,
+                                                                                          marks={i: str(i) for i in
+                                                                                                 [20, 30, 40, 50, 60,
+                                                                                                  70, 80, 90, 100]},
+                                                                                      ),
+                                                                                      NamedSlider(
+                                                                                          name="Learning Rate",
+                                                                                          short="learning-rate",
+
+                                                                                          min=20,
+                                                                                          max=200,
+                                                                                          step=None,
+                                                                                          val=100,
+                                                                                          marks={i: str(i) for i in
+                                                                                                 [20, 40, 60, 80, 100,
+                                                                                                  120, 140, 160, 180,
+                                                                                                  200]},
+                                                                                      ),
+
+                                                                                      dbc.Button("Submit",
+                                                                                                 id="pcatsne-submit-btn",
+                                                                                                 color="primary",
+                                                                                                 className="mr-1",
+                                                                                                 style={
+                                                                                                     "color": "White",
+                                                                                                     "background-color": "#32CD32",
+                                                                                                     "margin": "0 auto",
+                                                                                                     "display": "block"}),
+                                                                                      # dbc.Alert(id='submit-alert'),
+                                                                                      html.Hr(),
+                                                                                      html.Div(
+                                                                                          id='pcatsne-submit-alert'),
+
+                                                                                      ],
+
+                                                                                     )
+
+                                                                            ],
+                                                                        ),
+
+                                                                        html.Div(
+                                                                            className="nine columns",
+                                                                            children=[
+                                                                                html.Div(
+
+                                                                                    style={"border": "1px solid",
+                                                                                           "box-shadow": "5px 5px 5px #888888",
+                                                                                           "border-radius": "5px",
+                                                                                           "padding": "10px 10px 10px 10px",
+                                                                                           "background-color": "#E6E5E6"},
+                                                                                    children=[
+                                                                                        html.H3(id="tsne-graph-title",
+                                                                                                className="graph-title",
+                                                                                                children="t-SNE Representation ",
+                                                                                                ),
+                                                                                        dcc.Graph(id="tsne-plot",
+                                                                                                  style={
+                                                                                                      "height": "98vh",
+                                                                                                      "margin-bottom": "50px"})
+                                                                                    ],
+                                                                                ),
+                                                                            ],
+                                                                        ),
+
+                                                                    ],
+                                                                ),
+                                                            ])])
+                                                    ]
+                                          )
+                                 )
                         ]
-                
-                )
+
+                    )
                 ]
 
             ),
-            
-            
+
         ],
     )
 
 
 def demo_callbacks(app):
     @app.callback(
-    dash.dependencies.Output('slider-output-container', 'children'),
-    [dash.dependencies.Input('iterations-slider', 'value')])
+        dash.dependencies.Output('slider-output-container', 'children'),
+        [dash.dependencies.Input('iterations-slider', 'value')])
     def update_output(value):
         return 'You have selected {} iterations'.format(value)
 
-
     def preprocessing():
         print("preprocessing started ...")
 
-
-
     @app.callback(
-    dash.dependencies.Output('ae-dropdown', 'options'),
-    [dash.dependencies.Input('kmer', 'value')])
+        dash.dependencies.Output('ae-dropdown', 'options'),
+        [dash.dependencies.Input('kmer', 'value')])
     def update_ae_dropdown(k):
         return [{'label': i, 'value': i} for i in AE_Dict[k]]
 
     @app.callback(
-    dash.dependencies.Output('fasta-dropdown', 'options'),
-    [Input("upload-data", "filename"),Input("upload-data", "contents")])
-    def update_fasta_dropdown(uploaded_filenames,uploaded_file_contents):
+        dash.dependencies.Output('fasta-dropdown', 'options'),
+        [Input("upload-data", "filename"), Input("upload-data", "contents")])
+    def update_fasta_dropdown(uploaded_filenames, uploaded_file_contents):
         uploaded_fasta_files = [f.split('.')[0] for f in listdir("fasta_files") if isfile(join("fasta_files", f))]
         if uploaded_filenames is not None:
             file_name = '_'.join(uploaded_filenames.split(".")[:-1])
-            mod_uploaded_filenames = file_name.replace(" ","_") + ".fasta"
+            mod_uploaded_filenames = file_name.replace(" ", "_") + ".fasta"
             uploaded_fasta_files.append(mod_uploaded_filenames.split('.')[0])
-        
+
         return [{'label': i, 'value': i} for i in uploaded_fasta_files]
 
     @app.callback(
-    dash.dependencies.Output('pcatsne-fasta-dropdown', 'options'),
-    [Input("upload-data", "filename"),Input("upload-data", "contents")])
-    def update_fasta_dropdown(uploaded_filenames,uploaded_file_contents):
+        dash.dependencies.Output('pcatsne-fasta-dropdown', 'options'),
+        [Input("upload-data", "filename"), Input("upload-data", "contents")])
+    def update_fasta_dropdown(uploaded_filenames, uploaded_file_contents):
         uploaded_fasta_files = [f.split('.')[0] for f in listdir("fasta_files") if isfile(join("fasta_files", f))]
         if uploaded_filenames is not None:
             file_name = '_'.join(uploaded_filenames.split(".")[:-1])
-            mod_uploaded_filenames = file_name.replace(" ","_") + ".fasta"
+            mod_uploaded_filenames = file_name.replace(" ", "_") + ".fasta"
             uploaded_fasta_files.append(mod_uploaded_filenames.split('.')[0])
-        
+
         return [{'label': i, 'value': i} for i in uploaded_fasta_files]
 
     def save_file(name, content):
         """Decode and store a file uploaded with Plotly Dash."""
-        #print(content)
-        #print(name)
+        # print(content)
+        # print(name)
         with open(os.path.join(UPLOAD_DIRECTORY, name), "w") as fp:
             fp.write(content)
-    
-    
+
     @app.callback(
-    Output("upload-output", "children"),
-    [Input("upload-data", "filename"), Input("upload-data", "contents")])
+        Output("upload-output", "children"),
+        [Input("upload-data", "filename"), Input("upload-data", "contents")])
     def update_output(uploaded_filenames, uploaded_file_contents):
         """Save uploaded files and regenerate the file list."""
-        
+
         if uploaded_filenames is not None and uploaded_file_contents is not None:
             decoded_content = base64.b64decode(uploaded_file_contents.split(',')[-1]).decode('utf-8')
             file_extention = uploaded_filenames.split(".")[-1]
             file_name = '_'.join(uploaded_filenames.split(".")[:-1])
-            uploaded_filenames = file_name.replace(" ","_") + ".fasta"
+            uploaded_filenames = file_name.replace(" ", "_") + ".fasta"
             save_file(uploaded_filenames, decoded_content)
         return html.Div()
 
@@ -742,24 +915,22 @@
         time.sleep(2)
         return None
 
-        
-
-
     @app.callback(
-    Output('table-paging-and-sorting', 'data'),
-    [
-     Input('table-paging-and-sorting', "page_size"),
-     Input('table-paging-and-sorting', 'sort_by'),
-     Input('table-paging-and-sorting', 'selected_rows'),
-     Input('table-paging-and-sorting', "page_current"),]
-     )
-    def update_table(page_size, sort_by, selected_rows,page_current ):
+        Output('table-paging-and-sorting', 'data'),
+        [
+            Input('table-paging-and-sorting', "page_size"),
+            Input('table-paging-and-sorting', 'sort_by'),
+            Input('table-paging-and-sorting', 'selected_rows'),
+            Input('table-paging-and-sorting', "page_current"), ]
+    )
+    def update_table(page_size, sort_by, selected_rows, page_current):
         if len(sort_by):
             # Import settings data from csv
             SETTINGS_PATH = PATH.joinpath("settings").resolve()
             settings_df = pd.read_csv(SETTINGS_PATH.joinpath("sample_settings.csv"))
             settings_df['Index'] = range(1, len(settings_df) + 1)
-            settings_df = settings_df[["Index","FASTA File ", "Iterations","k in kmer","Autoencoder","2D","3D","Activation"]]
+            settings_df = settings_df[
+                ["Index", "FASTA File ", "Iterations", "k in kmer", "Autoencoder", "2D", "3D", "Activation"]]
             dff = settings_df.sort_values(
                 sort_by[0]['column_id'],
                 ascending=sort_by[0]['direction'] == 'asc',
@@ -770,14 +941,14 @@
             SETTINGS_PATH = PATH.joinpath("settings").resolve()
             settings_df = pd.read_csv(SETTINGS_PATH.joinpath("sample_settings.csv"))
             settings_df['Index'] = range(1, len(settings_df) + 1)
-            settings_df = settings_df[["Index","FASTA File ", "Iterations","k in kmer","Autoencoder","2D","3D","Activation"]]
+            settings_df = settings_df[
+                ["Index", "FASTA File ", "Iterations", "k in kmer", "Autoencoder", "2D", "3D", "Activation"]]
             dff = settings_df
 
         return dff.iloc[
-            page_current*page_size:(page_current+ 1)*page_size
-        ].to_dict('records')
+               page_current * page_size:(page_current + 1) * page_size
+               ].to_dict('records')
 
-
     def generate_figure_image(embedding_df):
 
         df = pd.DataFrame(dict(x=embedding_df["a0"].tolist(),
@@ -789,13 +960,12 @@
 
         return figure
 
-
     def generate_figure_2d_image(embedding_df):
 
         df = pd.DataFrame(dict(x=embedding_df["a0"].tolist(),
-                               y=embedding_df["a1"].tolist(),))
+                               y=embedding_df["a1"].tolist(), ))
 
-        figure = px.scatter(df, x="x", y="y",render_mode='webgl')
+        figure = px.scatter(df, x="x", y="y", render_mode='webgl')
         figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))
 
         return figure
@@ -805,25 +975,23 @@
         df = pd.DataFrame(dict(x=embedding_df["a0"].tolist(),
                                y=embedding_df["a1"].tolist(),
                                z=embedding_df["a2"].tolist(),
-                               color = embedding_df["lin_0"].tolist()))
+                               color=embedding_df["lin_0"].tolist()))
 
-        figure = px.scatter_3d(df, x="x", y="y", z="z", color = "color")
+        figure = px.scatter_3d(df, x="x", y="y", z="z", color="color")
         figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))
 
         return figure
-    
+
     def generate_hybrid_2d_fig(embedding_df):
 
         df = pd.DataFrame(dict(x=embedding_df["a0"].tolist(),
                                y=embedding_df["a1"].tolist(),
-                               color = embedding_df["lin_0"].tolist()))
+                               color=embedding_df["lin_0"].tolist()))
 
-        figure = px.scatter(df, x="x", y="y",color = "color", render_mode='webgl')
+        figure = px.scatter(df, x="x", y="y", color="color", render_mode='webgl')
         figure.update_traces(marker_line=dict(width=1, color='DarkSlateGray'))
 
         return figure
-    
-     
 
     @app.callback(
         [Output("graph-3d-plot-tsne", "figure"),
@@ -846,7 +1014,7 @@
          Input('table-paging-and-sorting', "page_size"),
          Input('table-paging-and-sorting', "page_current")],
         [
-            
+
             State("fasta-dropdown", "value"),
             State("iterations-slider", "value"),
             State("kmer", "value"),
@@ -854,187 +1022,221 @@
             State("dimension", "value"),
             State("activation", "value"),
             State("training_downsample", "value"),
-            
+
         ],
     )
     def display_2d_scatter_plot(
-        btn1,
-        sort_by,
-        selected_rows,
-        page_size,
-        current_page,
-        fasta_name,
-        iterations,
-        kmer,
-        ae,
-        dim,
-        act,
-        training_percentage,
-        
+            btn1,
+            sort_by,
+            selected_rows,
+            page_size,
+            current_page,
+            fasta_name,
+            iterations,
+            kmer,
+            ae,
+            dim,
+            act,
+            training_percentage,
+            blast,
+
     ):
-            
-            print(current_page)
-            if selected_rows and not btn1:
-                return load_from_table(sort_by, selected_rows, current_page, page_size)
-            input_url = [
-                "fasta_files",
-                str(fasta_name) + ".fasta",
-            ]
-            input_file_path = PATH.joinpath(*input_url)
+
+        print(current_page)
+        if selected_rows and not btn1:
+            return load_from_table(sort_by, selected_rows, current_page, page_size)
+
+        folder_created_now = False
+        if not os.path.exists("results/" + str(fasta_name)):
+            folder_created_now = True
+            os.makedirs("results/" + str(fasta_name))
+
+        input_url = [
+            "fasta_files",
+            str(fasta_name) + ".fasta",
+        ]
+        input_file_path = PATH.joinpath(*input_url)
 
-            data_url = [
-                "results",
-                str(fasta_name),
-                str(dim)+"_$$_"+str(kmer)+"_$$_"+str(iterations)+"_$$_"+str(ae)+"_$$_"+str(act)+".csv",
-            ]
-            
-            results_path = PATH.joinpath(*data_url)
-            folder_created_now = False
-            if not os.path.exists("results/"+str(fasta_name)):
-                folder_created_now = True
-                os.makedirs("results/"+str(fasta_name))
+        vecfile_url = [
+            "results",
+            str(fasta_name),
+            str(kmer) + "k_vectors" + ".csv",
+        ]
+        results_path_1 = PATH.joinpath(*vecfile_url)
 
-            freq_counter_url = [
-                "results",
-                str(fasta_name),
-            ]
-            freq_counter_path = PATH.joinpath(*freq_counter_url)
-            donut_fig = calc_acgt_count(input_file_path, int(kmer), freq_counter_path)
-            freq_fig = freq_count(input_file_path, int(kmer), freq_counter_path)
+        resultsfile_url = [
+            "results",
+            str(fasta_name),
+            str(training_percentage) + "sample perc" + "_$$_" + str(dim) + "_$$_" + str(kmer) + "_$$_" + str(
+                iterations) + "_$$_" + str(ae) + "_$$_" + str(act) + ".csv",
+        ]
+
+        results_path_2 = PATH.joinpath(*resultsfile_url)
 
-            try:
-                print("available")
-                embedding_df = pd.read_csv(
-                    results_path, index_col=0, encoding="ISO-8859-1"
-                )
+        try:
+            print("available")
+            embedding_df = pd.read_csv(
+                results_path_2, index_col=0, encoding="ISO-8859-1"
+            )
 
-            except FileNotFoundError as error:
-                print(
-                    error,
-                    "\nThe dataset was not found. Please generate it using generate_demo_embeddings.py",
-                )
+        except FileNotFoundError as error:
+            print(
+                error,
+                "\nThe dataset was not found. Please generate it ",
+            )
 
-                act = str(act)
-                ui_ae = ae
-                ae = ae[1:-1].split(",")
-                
-                ind = ae.index('x')
-                ae[ind] = int(dim[0])
-                for i in range(len(ae)):
-                    ae[i] = int(ae[i])
-                
-                # l = metagenomics_processor.process(input_file_path, int(kmer), int(iterations), act, ae, results_path)
-                
+            act = str(act)
+            ui_ae = ae
+            ae = ae[1:-1].split(",")
+
+            ind = ae.index('x')
+            ae[ind] = int(dim[0])
+            for i in range(len(ae)):
+                ae[i] = int(ae[i])
+
+            # l = metagenomics_processor.process(input_file_path, int(kmer), int(iterations), act, ae, results_path)
 
-                
-
-                training_percentage = training_percentage/100
-                if folder_created_now:
-                    l = backend.process(input_file_path, int(kmer), int(iterations), act, ae,training_percentage)
+            vec_file_available = False
+            search_string = str(kmer) + "k_vectors"
+            import re
+            for f in os.listdir('./results/' + str(fasta_name)):
+                if re.match(search_string, f):
+                    vec_file_available = True
+                    vec_file = pd.read_csv(
+                        "./results/" + str(fasta_name) + "/" + str(f), index_col=0, encoding="ISO-8859-1"
+                    )
                 else:
-                    import re
-                    for f in os.listdir('./results/'+str(fasta_name)):
-                        print("inside 1")
-                        if re.match('3d', f):
-                            print("inside 3d")
-                            embedding_df = pd.read_csv(
-                                "./results/"+str(fasta_name)+"/"+str(f), index_col=0, encoding="ISO-8859-1"
-                            )
-                            l = backend.process_ae(input_file_path, int(kmer), int(iterations), act, ae,
-                                                        training_percentage, embedding_df)
-                            break
-                        elif re.match('2d', f):
-                            print("inside 2d")
-                            embedding_df = pd.read_csv(
-                                "./results/"+str(fasta_name)+"/"+str(f), index_col=0, encoding="ISO-8859-1"
-                            )
-                            l = backend.process_ae(input_file_path, int(kmer), int(iterations), act, ae,
-                                                        training_percentage, embedding_df)
-                            break
+                    vec_file_available = False
+
+            if folder_created_now or not vec_file_available:
+                # Flag checks must happen
+                output_dataframe = backend.process(input_file_path, int(kmer), int(iterations), act, ae, training_percentage / 100,
+                                    run_vect=True, run_AE=True, run_blast=blast, data=None, )
+            else:
+                search_string = str(training_percentage) + "sample perc"
+                import re
+                processed_flag = False
+                for f in os.listdir('./results/' + str(fasta_name)):
+                    print("inside 1")
+                    if re.match(search_string, f):
+                        print("inside 3d")
+                        processed_flag = True
+                        embedding_df_1 = pd.read_csv(
+                            "./results/" + str(fasta_name) + "/" + str(f), index_col=0, encoding="ISO-8859-1"
+                        )
+                        temp_vec_file = vec_file.drop(["a","c","g","t"], axis=1)
+                        embedding_df = pd.concat([embedding_df_1, temp_vec_file], axis=1)
+
+                        # Combine vec_file and embedding_df and pass as embedding_df
+                        # flag checks must happen
+                        output_dataframe = backend.process(input_file_path, int(kmer), int(iterations), act, ae,
+                                            training_percentage / 100, run_vect=False, run_AE=True,
+                                            run_blast=False, data=embedding_df)
+                        break
+                    continue
 
-                        else:
-                            l = backend.process(input_file_path, int(kmer), int(iterations), act, ae,
-                                                           training_percentage)
+                if not processed_flag:
+                    # flag checks must happen
+                    output_dataframe = backend.process(input_file_path, int(kmer), int(iterations), act, ae,
+                                        training_percentage / 100, run_vect=False, run_AE=True,
+                                        run_blast=blast, data=vec_file)
 
-                print("out of process")
+            print("out of process")
 
-                l.to_csv(results_path)
-                embedding_df = pd.read_csv(
-                    results_path, index_col=0, encoding="ISO-8859-1"
-                )
-                print("read csv")
-                settings_path = 'settings/sample_settings.csv'
-               
-               
-                settings = {'FASTA File ': [str(fasta_name) + ".fasta"],
-                            'Iterations': [iterations],
-                            'k in kmer': [kmer],
-                            'Autoencoder': [str(ui_ae).replace(" ", "")],
-                            '2D': 'Yes' if dim == "2d" else "",
-                            '3D': 'Yes' if dim == "3d" else "",
-                            'Activation': [act]
-                            }
-                print(settings)
-                print(pd.DataFrame(settings))
-                pd.DataFrame(settings).to_csv(settings_path, mode='a', header=not (path.exists(settings_path)), index=False)
+            header = ["a", "c", "g", "t", "vector"]
+            output_dataframe.to_csv(results_path_1, columns=header)
+
+            header = ["a", "c", "g", "t","accession","taxid","lin_0","lin_1","lin_2","lin_3","lin_4","lin_5","lin_6","lin_7","sampled","a0","a1","a2"]
+            output_dataframe.to_csv(results_path_2, columns=header)
+
+            embedding_df = pd.read_csv(
+                results_path_2, index_col=0, encoding="ISO-8859-1"
+            )
+            print("read csv")
+            settings_path = 'settings/sample_settings.csv'
+
+            settings = {'FASTA File ': [str(fasta_name) + ".fasta"],
+                        'Iterations': [iterations],
+                        'k in kmer': [kmer],
+                        'Autoencoder': [str(ui_ae).replace(" ", "")],
+                        '2D': 'Yes' if dim == "2d" else "",
+                        '3D': 'Yes' if dim == "3d" else "",
+                        'Activation': [act],
+                        'Training Percentage' : str(training_percentage)
+                        }
+            print(settings)
+            print(pd.DataFrame(settings))
+            pd.DataFrame(settings).to_csv(settings_path, mode='a', header=not (path.exists(settings_path)), index=False)
 
-
-            
-            sampled_embedding_df = embedding_df[embedding_df['sampled']]
- 
-            sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')]=sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')].apply(lambda x : x.fillna(value="NA"))
-            
-            dim = int(dim[0])
-            if dim==2:
-                figure = generate_figure_2d_image(sampled_embedding_df)
-                graph_title = "Sequence data reduced to 2D Representation "
-                hybrid_plot = generate_hybrid_2d_fig(sampled_embedding_df)
-            else:
-                figure = generate_figure_image(sampled_embedding_df)
-                graph_title = "Sequence data reduced to 3D Representation "
-                hybrid_plot = generate_hybrid_fig(sampled_embedding_df)
-            msg = "Sucsessful !"
-            st = {'width':'100%','color'
-            :'Green','background-color':'#D3FFC5 ',' border-style':'solid','border-radius': '2px', 'padding':'3px 3px 2px 2px', 'text-align': 'center',"border": "1px solid", "box-shadow": "5px 5px 5px #888888", "border-radius":"5px",}
-            domain_donut_figure = generate_domain_donut(embedding_df)
-            phylum_donut_figure = generate_phylum_donut(embedding_df)
-            class_donut_figure = generate_class_donut(embedding_df)
-            order_donut_figure = generate_order_donut(embedding_df)
-            family_donut_figure = generate_family_donut(embedding_df)
-            genus_donut_figure = generate_genus_donut(embedding_df)
-            species_donut_figure = generate_species_donut(embedding_df)
-            violin_plot = generate_violin_plot(embedding_df)
-            return figure, donut_fig, freq_fig, graph_title, hybrid_plot,domain_donut_figure,phylum_donut_figure,class_donut_figure,order_donut_figure,family_donut_figure,genus_donut_figure,species_donut_figure, violin_plot,html.Div(msg, style = st)
+        sampled_embedding_df = embedding_df[embedding_df['sampled']]
+
+        sampled_embedding_df.loc[:, sampled_embedding_df.columns.str.contains('lin')] = sampled_embedding_df.loc[:,
+                                                                                        sampled_embedding_df.columns.str.contains(
+                                                                                            'lin')].apply(
+            lambda x: x.fillna(value="NA"))
+
+        dim = int(dim[0])
+        if dim == 2:
+            figure = generate_figure_2d_image(sampled_embedding_df)
+            graph_title = "Sequence data reduced to 2D Representation "
+            hybrid_plot = generate_hybrid_2d_fig(sampled_embedding_df)
+        else:
+            figure = generate_figure_image(sampled_embedding_df)
+            graph_title = "Sequence data reduced to 3D Representation "
+            hybrid_plot = generate_hybrid_fig(sampled_embedding_df)
+        msg = "Sucsessful !"
+        st = {'width': '100%', 'color'
+        : 'Green', 'background-color': '#D3FFC5 ', ' border-style': 'solid', 'border-radius': '2px',
+              'padding': '3px 3px 2px 2px', 'text-align': 'center', "border": "1px solid",
+              "box-shadow": "5px 5px 5px #888888", "border-radius": "5px", }
+        domain_donut_figure = generate_domain_donut(embedding_df)
+        phylum_donut_figure = generate_phylum_donut(embedding_df)
+        class_donut_figure = generate_class_donut(embedding_df)
+        order_donut_figure = generate_order_donut(embedding_df)
+        family_donut_figure = generate_family_donut(embedding_df)
+        genus_donut_figure = generate_genus_donut(embedding_df)
+        species_donut_figure = generate_species_donut(embedding_df)
+        violin_plot = generate_violin_plot(embedding_df)
+
+        freq_counter_url = [
+            "results",
+            str(fasta_name),
+        ]
+        freq_counter_path = PATH.joinpath(*freq_counter_url)
+        donut_fig = calc_acgt_count(input_file_path, int(kmer), freq_counter_path)
+        freq_fig = freq_count(input_file_path, int(kmer), freq_counter_path)
+
+        return figure, donut_fig, freq_fig, graph_title, hybrid_plot, domain_donut_figure, phylum_donut_figure, class_donut_figure, order_donut_figure, family_donut_figure, genus_donut_figure, species_donut_figure, violin_plot, html.Div(
+            msg, style=st)
 
     def calc_acgt_count(input_path, k, output_path):
         try:
-            with open(output_path/'_acgt.json') as json_file:
+            with open(output_path / '_acgt.json') as json_file:
                 data = json.load(json_file)
 
         except FileNotFoundError:
             metagenomics_counter.count_process(input_path, k, output_path)
-            with open(output_path/'_acgt.json') as json_file:
+            with open(output_path / '_acgt.json') as json_file:
                 data = json.load(json_file)
 
         donut_labels = ['A', 'C', 'G', 'T']
         donut_values = data
         donut_fig = go.Figure(data=[go.Pie(labels=donut_labels, values=donut_values, hole=.3)])
-        GC_value = (donut_values[1]+donut_values[2])/sum(donut_values)
-        GC_value = round(GC_value*100, 3)
+        GC_value = (donut_values[1] + donut_values[2]) / sum(donut_values)
+        GC_value = round(GC_value * 100, 3)
         GC_content = "GC-content = " + str(GC_value) + "%"
         donut_fig.update_layout(title=GC_content)
         return donut_fig
 
-
     def freq_count(input_path, k, output_path):
-        file_name = str(k)+"_freqs.json"
+        file_name = str(k) + "_freqs.json"
         try:
-            with open(output_path/file_name) as json_file:
+            with open(output_path / file_name) as json_file:
                 data = json.load(json_file)
 
         except FileNotFoundError:
             metagenomics_counter.freq_process(input_path, k, output_path)
-            with open(output_path/file_name) as json_file:
+            with open(output_path / file_name) as json_file:
                 data = json.load(json_file)
 
         k_mer_list = pyVectorizer.all_kmers(k)
@@ -1045,15 +1247,15 @@
             mode='lines+markers')])
         return freq_fig
 
-
-    def load_from_table(sort_by,selected_rows, current_page, page_size):
+    def load_from_table(sort_by, selected_rows, current_page, page_size):
         print("inside load from table")
         # Import settings data from csv
         SETTINGS_PATH = PATH.joinpath("settings").resolve()
         settings_df = pd.read_csv(SETTINGS_PATH.joinpath("sample_settings.csv"))
         settings_df['Index'] = range(1, len(settings_df) + 1)
-        settings_df = settings_df[["Index","FASTA File ", "Iterations","k in kmer","Autoencoder","2D","3D","Activation"]]
-            
+        settings_df = settings_df[
+            ["Index", "FASTA File ", "Iterations", "k in kmer", "Autoencoder", "2D", "3D", "Activation"]]
+
         if len(sort_by):
             dff = settings_df.sort_values(
                 sort_by[0]['column_id'],
@@ -1063,20 +1265,20 @@
         else:
             dff = settings_df
         # if selected_rows is not None and len(selected_rows) :
-            # print(dff.iloc[[selected_rows[0]]]['FASTA File '].tolist())
-        print(dff.iloc[[(current_page*page_size)+selected_rows[0]]])
-        fasta_name = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['FASTA File '].tolist()[0][:-6]
-        iterations = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['Iterations'].tolist()[0]
-        kmer = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['k in kmer'].tolist()[0]
-        ae = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['Autoencoder'].tolist()[0]
-        dim2 = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['2D'].tolist()[0]
-        dim3 = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['3D'].tolist()[0]
-        act = dff.iloc[[(current_page*page_size)+selected_rows[0]]]['Activation'].tolist()[0]
+        # print(dff.iloc[[selected_rows[0]]]['FASTA File '].tolist())
+        print(dff.iloc[[(current_page * page_size) + selected_rows[0]]])
+        fasta_name = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['FASTA File '].tolist()[0][:-6]
+        iterations = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['Iterations'].tolist()[0]
+        kmer = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['k in kmer'].tolist()[0]
+        ae = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['Autoencoder'].tolist()[0]
+        dim2 = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['2D'].tolist()[0]
+        dim3 = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['3D'].tolist()[0]
+        act = dff.iloc[[(current_page * page_size) + selected_rows[0]]]['Activation'].tolist()[0]
 
         print(fasta_name)
 
-        dim=""
-        if  isinstance(dim2, str):
+        dim = ""
+        if isinstance(dim2, str):
             dim = "2d"
         else:
             dim = "3d"
@@ -1087,7 +1289,7 @@
         ]
         freq_counter_path = PATH.joinpath(*freq_counter_url)
 
-        freq_fig = freq_count("",int(kmer),freq_counter_path)
+        freq_fig = freq_count("", int(kmer), freq_counter_path)
         donut_fig = calc_acgt_count("", int(kmer), freq_counter_path)
 
         scatter_url = [
@@ -1099,11 +1301,12 @@
         embedding_df = pd.read_csv(
             results_path, index_col=0, encoding="ISO-8859-1"
         )
-       
+
         sampled_embedding_df = embedding_df[embedding_df['sampled']]
-        sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')]=sampled_embedding_df.loc[:,sampled_embedding_df.columns.str.contains('lin')].apply(lambda x : x.fillna(value="NA"))
-
-        
+        sampled_embedding_df.loc[:, sampled_embedding_df.columns.str.contains('lin')] = sampled_embedding_df.loc[:,
+                                                                                        sampled_embedding_df.columns.str.contains(
+                                                                                            'lin')].apply(
+            lambda x: x.fillna(value="NA"))
 
         if int(dim[0]) == 2:
             scatter_figure = generate_figure_2d_image(sampled_embedding_df)
@@ -1121,17 +1324,18 @@
         genus_donut_figure = generate_genus_donut(embedding_df)
         species_donut_figure = generate_species_donut(embedding_df)
         violin_plot = generate_violin_plot(embedding_df)
-        
 
-        return scatter_figure, donut_fig, freq_fig, graph_title, hybrid_plot,domain_donut_figure,phylum_donut_figure,class_donut_figure,order_donut_figure,family_donut_figure,genus_donut_figure,species_donut_figure, violin_plot, html.Div()
+        return scatter_figure, donut_fig, freq_fig, graph_title, hybrid_plot, domain_donut_figure, phylum_donut_figure, class_donut_figure, order_donut_figure, family_donut_figure, genus_donut_figure, species_donut_figure, violin_plot, html.Div()
 
     def generate_taxa_donut():
-        
-        labels = ['mycobacterium avium','mycobacterium bovis','mycobacterium tuberculosis','Clostridium botulinum','Clostridium perfringens', 'Clostridium tetani']
-        values = [4500, 2500, 1053, 500, 20,80]
+
+        labels = ['mycobacterium avium', 'mycobacterium bovis', 'mycobacterium tuberculosis', 'Clostridium botulinum',
+                  'Clostridium perfringens', 'Clostridium tetani']
+        values = [4500, 2500, 1053, 500, 20, 80]
         fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_domain_donut(df):
         df = df.groupby('lin_7').size().reset_index(name='counts')
         labels = list(df['lin_7'])
@@ -1140,6 +1344,7 @@
         fig.update_layout(title="Domain Summary")
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_phylum_donut(df):
         df = df.groupby('lin_5').size().reset_index(name='counts')
         labels = list(df['lin_5'])
@@ -1148,6 +1353,7 @@
         fig.update_layout(title="Phylum Summary")
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_class_donut(df):
         df = df.groupby('lin_4').size().reset_index(name='counts')
         labels = list(df['lin_4'])
@@ -1156,6 +1362,7 @@
         fig.update_layout(title="Class Summary")
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_order_donut(df):
         df = df.groupby('lin_3').size().reset_index(name='counts')
         labels = list(df['lin_3'])
@@ -1164,6 +1371,7 @@
         fig.update_layout(title="Order Summary")
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_family_donut(df):
         df = df.groupby('lin_2').size().reset_index(name='counts')
         labels = list(df['lin_2'])
@@ -1172,6 +1380,7 @@
         fig.update_layout(title="Family Summary")
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_genus_donut(df):
         df = df.groupby('lin_1').size().reset_index(name='counts')
         labels = list(df['lin_1'])
@@ -1180,6 +1389,7 @@
         fig.update_layout(title="Genus Summary")
         fig.update_traces(marker=dict(line=dict(color='#000000', width=2)))
         return fig
+
     def generate_species_donut(df):
         df = df.groupby('lin_0').size().reset_index(name='counts')
         labels = list(df['lin_0'])
@@ -1192,27 +1402,25 @@
     def generate_violin_plot(df):
         species = df.lin_0.unique().tolist()
 
-        #gc_content=(g+c)*100/(a+t+g+c)
-        #df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv")
+        # gc_content=(g+c)*100/(a+t+g+c)
+        # df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv")
 
         fig = go.Figure()
 
-
         for s in species:
             fig.add_trace(go.Violin(x=df['lin_0'][df['lin_0'] == s],
-                                    y=((df['g']+df['c'])*100/(df['a']+df['c']+df['g']+df['t']))[df['lin_0'] == s],
+                                    y=((df['g'] + df['c']) * 100 / (df['a'] + df['c'] + df['g'] + df['t']))[
+                                        df['lin_0'] == s],
                                     name=s,
                                     box_visible=True,
                                     meanline_visible=True))
 
-
         return fig
 
-
     @app.callback(
-         [Output("tsne-plot", "figure"),
-         Output("tsne-graph-title", "children"),],
-        [Input("pcatsne-submit-btn", "n_clicks"),],
+        [Output("tsne-plot", "figure"),
+         Output("tsne-graph-title", "children"), ],
+        [Input("pcatsne-submit-btn", "n_clicks"), ],
         [
             State("pcatsne-fasta-dropdown", "value"),
             State("slider-iterations", "value"),
@@ -1224,66 +1432,61 @@
         ],
     )
     def display_tsne_plot(
-        pca_tsne_btn,
-        fasta_name,
-        iterations,
-        perplexity,
-        pca_dim,
-        lr,
-        kmer,
-        dim,
+            pca_tsne_btn,
+            fasta_name,
+            iterations,
+            perplexity,
+            pca_dim,
+            lr,
+            kmer,
+            dim,
     ):
 
-            input_url = [
-                "fasta_files",
-                str(fasta_name) + ".fasta",
-            ]
-            input_file_path = PATH.joinpath(*input_url)
+        input_url = [
+            "fasta_files",
+            str(fasta_name) + ".fasta",
+        ]
+        input_file_path = PATH.joinpath(*input_url)
 
-            data_url = [
-                "results",
-                str(fasta_name),
-                "tsne",
-                str(dim)+"_$$_"+str(kmer)+"_$$_"+"pca"+"_$$_"+str(pca_dim)+"_$$_"+"tsne"+"_$$_"+str(iterations)+"_$$_"+str(perplexity)+"_$$_"+str(lr)+".csv",
-            ]
-            results_path = PATH.joinpath(*data_url)
+        data_url = [
+            "results",
+            str(fasta_name),
+            "tsne",
+            str(dim) + "_$$_" + str(kmer) + "_$$_" + "pca" + "_$$_" + str(pca_dim) + "_$$_" + "tsne" + "_$$_" + str(
+                iterations) + "_$$_" + str(perplexity) + "_$$_" + str(lr) + ".csv",
+        ]
+        results_path = PATH.joinpath(*data_url)
 
-            if not os.path.exists("results/"+str(fasta_name)+"/tsne"):
-                os.makedirs("results/"+str(fasta_name)+"/tsne")
+        if not os.path.exists("results/" + str(fasta_name) + "/tsne"):
+            os.makedirs("results/" + str(fasta_name) + "/tsne")
 
-
-            try:
-                embedding_df = pd.read_csv(
-                    results_path, index_col=0, encoding="ISO-8859-1"
-                )
+        try:
+            embedding_df = pd.read_csv(
+                results_path, index_col=0, encoding="ISO-8859-1"
+            )
 
-            except FileNotFoundError as error:
-                print(
-                    error,
-                    "\nThe dataset was not found. Please generate it using generate_demo_embeddings.py",
-                )
+        except FileNotFoundError as error:
+            print(
+                error,
+                "\nThe dataset was not found. Please generate it using generate_demo_embeddings.py",
+            )
 
-                run_tsne.process(input_file_path, int(kmer), int(pca_dim), int(dim[0]), int(iterations), int(lr), int(perplexity), results_path)
+            run_tsne.process(input_file_path, int(kmer), int(pca_dim), int(dim[0]), int(iterations), int(lr),
+                             int(perplexity), results_path)
 
-                print("out of process")
-                embedding_df = pd.read_csv(
-                    results_path, index_col=0, encoding="ISO-8859-1"
-                )
-                print("read csv")
+            print("out of process")
+            embedding_df = pd.read_csv(
+                results_path, index_col=0, encoding="ISO-8859-1"
+            )
+            print("read csv")
 
-
-
-            dim = int(dim[0])
-            if dim==2:
-                figure = generate_figure_2d_image(embedding_df)
-                graph_title = "Sequence data reduced to 2D Representation "
+        dim = int(dim[0])
+        if dim == 2:
+            figure = generate_figure_2d_image(embedding_df)
+            graph_title = "Sequence data reduced to 2D Representation "
 
-            else:
-                figure = generate_figure_image(embedding_df)
-                graph_title = "Sequence data reduced to 3D Representation "
+        else:
+            figure = generate_figure_image(embedding_df)
+            graph_title = "Sequence data reduced to 3D Representation "
 
-
-            return figure, graph_title
-
-
-
+        return figure, graph_title
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Core\r\ndash==1.7.0\r\ngunicorn==19.9.0\r\nnumpy==1.16.3\r\npandas==0.24.2\r\nscikit-learn==0.22.0\r\nscipy==1.2.1\r\npillow==7.0.0\r\nkeras==2.4.3\r\ndash_bootstrap_components\r\ntensorflow\r\nbiopython\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements.txt	(revision e747a380003ec7445d7328f7014926086a17cd4f)
+++ requirements.txt	(date 1617708204311)
@@ -1,7 +1,7 @@
 # Core
 dash==1.7.0
 gunicorn==19.9.0
-numpy==1.16.3
+numpy==1.19.5
 pandas==0.24.2
 scikit-learn==0.22.0
 scipy==1.2.1
@@ -10,3 +10,4 @@
 dash_bootstrap_components
 tensorflow
 biopython
+umap_learn
Index: run_tsne.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pyVectorizer\r\nimport pandas as pd\r\nfrom sklearn.decomposition import PCA\r\nimport metagenomics_processor\r\nimport numpy as np\r\nfrom sklearn.manifold import TSNE\r\n\r\ndef process(input_path, k,pca_dim, dim, iter, lr, perp, output_path):\r\n    vecs = np.array(pyVectorizer.vectorize_file(input_path, k)).astype(np.float32)\r\n    metagenomics_processor.normalize_over_axis1(vecs)\r\n    pca = PCA(n_components=pca_dim)\r\n    pca_data = pca.fit_transform(vecs)\r\n    print(pca_data)\r\n\r\n    tsne = TSNE(\r\n            n_components=dim,\r\n            n_iter=max(iter,250),\r\n            learning_rate=lr,\r\n            perplexity=perp,\r\n            random_state=1131,\r\n        )\r\n\r\n    r = tsne.fit_transform(pca_data)\r\n    print(r)\r\n\r\n    dataset = pd.DataFrame({'a0': r[:, 0], 'a1': r[:, 1]}) if (r.shape[1] == 2) else pd.DataFrame(\r\n        {'a0': r[:, 0], 'a1': r[:, 1], 'a2': r[:, 2]})\r\n\r\n\r\n    if output_path: dataset.to_csv(output_path)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- run_tsne.py	(revision e747a380003ec7445d7328f7014926086a17cd4f)
+++ run_tsne.py	(date 1617708348608)
@@ -1,26 +1,37 @@
+from openTSNE.callbacks import ErrorLogger
+import umap
 import pyVectorizer
 import pandas as pd
 from sklearn.decomposition import PCA
 import metagenomics_processor
 import numpy as np
-from sklearn.manifold import TSNE
+# from sklearn.manifold import TSNE
+from openTSNE import TSNE
 
 def process(input_path, k,pca_dim, dim, iter, lr, perp, output_path):
     vecs = np.array(pyVectorizer.vectorize_file(input_path, k)).astype(np.float32)
     metagenomics_processor.normalize_over_axis1(vecs)
-    pca = PCA(n_components=pca_dim)
-    pca_data = pca.fit_transform(vecs)
-    print(pca_data)
+    # pca = PCA(n_components=pca_dim)
+    # pca_data = pca.fit_transform(vecs)
+    # print(pca_data)
+
+    # tsne = TSNE(
+    #         n_components=dim,
+    #         n_iter=max(iter,250),
+    #         learning_rate=lr,
+    #         metric="euclidean",
+    #         callbacks=ErrorLogger(),
+    #         n_jobs=8,
+    #         perplexity=perp,
+    #         random_state=1131,
+    #     )
 
-    tsne = TSNE(
-            n_components=dim,
-            n_iter=max(iter,250),
-            learning_rate=lr,
-            perplexity=perp,
-            random_state=1131,
-        )
+    # r = tsne.fit_transform(vecs)
+    # r = tsne.fit(vecs)
 
-    r = tsne.fit_transform(pca_data)
+    reducer = umap.UMAP()
+    r = reducer.fit_transform(vecs)
+
     print(r)
 
     dataset = pd.DataFrame({'a0': r[:, 0], 'a1': r[:, 1]}) if (r.shape[1] == 2) else pd.DataFrame(
